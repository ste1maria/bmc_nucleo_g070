
bmc_iva_hp_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005864  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005adc  08005adc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005adc  08005adc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005adc  08005adc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005adc  08005adc  00015adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  08005b54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08005b54  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130a3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002575  00000000  00000000  0003313b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000356b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00036500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000370e  00000000  00000000  00037268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011127  00000000  00000000  0003a976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3db  00000000  00000000  0004ba9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dae78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003afc  00000000  00000000  000daecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005904 	.word	0x08005904

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08005904 	.word	0x08005904

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <start_debug_session>:
/*  var-s */
extern  UART_HandleTypeDef huart1;
uint8_t service_UART_rx_buf;
/*----- */

void start_debug_session(void){
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
    send_console_greetings();
 8000404:	f000 f806 	bl	8000414 <send_console_greetings>

    show_console_menu();
 8000408:	f000 f810 	bl	800042c <show_console_menu>

    //start_receive_routine();
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <send_console_greetings>:

static void send_console_greetings(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	console_print("Hello");
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <send_console_greetings+0x14>)
 800041a:	0018      	movs	r0, r3
 800041c:	f000 f862 	bl	80004e4 <console_print>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	0800591c 	.word	0x0800591c

0800042c <show_console_menu>:

static void show_console_menu(void){
 800042c:	b5b0      	push	{r4, r5, r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
	char  menu_header[]= "Service menu: \n\r ";
 8000432:	200c      	movs	r0, #12
 8000434:	183b      	adds	r3, r7, r0
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <show_console_menu+0x48>)
 8000438:	ca32      	ldmia	r2!, {r1, r4, r5}
 800043a:	c332      	stmia	r3!, {r1, r4, r5}
 800043c:	6811      	ldr	r1, [r2, #0]
 800043e:	6019      	str	r1, [r3, #0]
 8000440:	8892      	ldrh	r2, [r2, #4]
 8000442:	809a      	strh	r2, [r3, #4]

	const char *menu_entries[3];
	menu_entries[0] = "1 - show info;";
 8000444:	003b      	movs	r3, r7
 8000446:	4a0c      	ldr	r2, [pc, #48]	; (8000478 <show_console_menu+0x4c>)
 8000448:	601a      	str	r2, [r3, #0]
	menu_entries[1] ="2 - foo;";
 800044a:	003b      	movs	r3, r7
 800044c:	4a0b      	ldr	r2, [pc, #44]	; (800047c <show_console_menu+0x50>)
 800044e:	605a      	str	r2, [r3, #4]
	menu_entries[2] = "3 - bar;";
 8000450:	003b      	movs	r3, r7
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <show_console_menu+0x54>)
 8000454:	609a      	str	r2, [r3, #8]

	console_print(menu_header);
 8000456:	183b      	adds	r3, r7, r0
 8000458:	0018      	movs	r0, r3
 800045a:	f000 f843 	bl	80004e4 <console_print>
	console_print_array(menu_entries);
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	f000 f80f 	bl	8000484 <console_print_array>
	start_receive_routine();
 8000466:	f000 f849 	bl	80004fc <start_receive_routine>
}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b008      	add	sp, #32
 8000470:	bdb0      	pop	{r4, r5, r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	0800594c 	.word	0x0800594c
 8000478:	08005924 	.word	0x08005924
 800047c:	08005934 	.word	0x08005934
 8000480:	08005940 	.word	0x08005940

08000484 <console_print_array>:

static void console_print_array(const char ** string_sequence){
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	size_t array_size = sizeof(string_sequence)/sizeof(char)-1;
 800048c:	2303      	movs	r3, #3
 800048e:	613b      	str	r3, [r7, #16]

	for (size_t index = 0; index < array_size; index++){
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e018      	b.n	80004c8 <console_print_array+0x44>
		char *test= string_sequence[index];
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	18d3      	adds	r3, r2, r3
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	60fb      	str	r3, [r7, #12]
		console_print("\t");
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <console_print_array+0x58>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 f81d 	bl	80004e4 <console_print>
		console_print(string_sequence[index]);
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	18d3      	adds	r3, r2, r3
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 f815 	bl	80004e4 <console_print>
		console_print("\n\r");
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <console_print_array+0x5c>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 f811 	bl	80004e4 <console_print>
	for (size_t index = 0; index < array_size; index++){
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	693b      	ldr	r3, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d3e2      	bcc.n	8000496 <console_print_array+0x12>
	}
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b006      	add	sp, #24
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	08005960 	.word	0x08005960
 80004e0:	08005964 	.word	0x08005964

080004e4 <console_print>:

static void console_print(char * message){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	printf(message);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	0018      	movs	r0, r3
 80004f0:	f004 fa6a 	bl	80049c8 <iprintf>
	//HAL_UART_Transmit(&huart1, &service_UART_rx_buf, sizeof(service_UART_rx_buf), HAL_MAX_DELAY);
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b002      	add	sp, #8
 80004fa:	bd80      	pop	{r7, pc}

080004fc <start_receive_routine>:

/* Starts /restartsISR on UART RX line */
static void start_receive_routine(void){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, (uint8_t*)&service_UART_rx_buf, sizeof(service_UART_rx_buf));
 8000500:	4904      	ldr	r1, [pc, #16]	; (8000514 <start_receive_routine+0x18>)
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <start_receive_routine+0x1c>)
 8000504:	2201      	movs	r2, #1
 8000506:	0018      	movs	r0, r3
 8000508:	f002 ffcd 	bl	80034a6 <HAL_UART_Receive_IT>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	20000098 	.word	0x20000098
 8000518:	200000e8 	.word	0x200000e8

0800051c <__io_putchar>:
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
/*int __io_putchar(int ch)*/
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 50);
 8000524:	1d39      	adds	r1, r7, #4
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <__io_putchar+0x20>)
 8000528:	2332      	movs	r3, #50	; 0x32
 800052a:	2201      	movs	r2, #1
 800052c:	f002 ff10 	bl	8003350 <HAL_UART_Transmit>
	return ch;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	0018      	movs	r0, r3
 8000534:	46bd      	mov	sp, r7
 8000536:	b002      	add	sp, #8
 8000538:	bd80      	pop	{r7, pc}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	200000e8 	.word	0x200000e8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fc90 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f814 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f98c 	bl	8000868 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000550:	f000 f93c 	bl	80007cc <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000554:	f000 f86e 	bl	8000634 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000558:	f000 f8ea 	bl	8000730 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  start_debug_session();
 800055c:	f7ff ff50 	bl	8000400 <start_debug_session>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(250);
 8000560:	20fa      	movs	r0, #250	; 0xfa
 8000562:	f000 fd07 	bl	8000f74 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	05db      	lsls	r3, r3, #23
 800056a:	2120      	movs	r1, #32
 800056c:	0018      	movs	r0, r3
 800056e:	f000 ff70 	bl	8001452 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000572:	e7f5      	b.n	8000560 <main+0x20>

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b099      	sub	sp, #100	; 0x64
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	242c      	movs	r4, #44	; 0x2c
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2334      	movs	r3, #52	; 0x34
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f004 fa17 	bl	80049b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058a:	231c      	movs	r3, #28
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2310      	movs	r3, #16
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f004 fa0f 	bl	80049b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059a:	003b      	movs	r3, r7
 800059c:	0018      	movs	r0, r3
 800059e:	231c      	movs	r3, #28
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f004 fa08 	bl	80049b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 ff6b 	bl	8001488 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2202      	movs	r2, #2
 80005b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	0052      	lsls	r2, r2, #1
 80005be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2240      	movs	r2, #64	; 0x40
 80005ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	2200      	movs	r2, #0
 80005d0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	0018      	movs	r0, r3
 80005d6:	f000 ffa3 	bl	8001520 <HAL_RCC_OscConfig>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005de:	f000 fa49 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	211c      	movs	r1, #28
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2207      	movs	r2, #7
 80005e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2100      	movs	r1, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f001 faa3 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060a:	f000 fa33 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800060e:	003b      	movs	r3, r7
 8000610:	2201      	movs	r2, #1
 8000612:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000614:	003b      	movs	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061a:	003b      	movs	r3, r7
 800061c:	0018      	movs	r0, r3
 800061e:	f001 fc3f 	bl	8001ea0 <HAL_RCCEx_PeriphCLKConfig>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000626:	f000 fa25 	bl	8000a74 <Error_Handler>
  }
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b019      	add	sp, #100	; 0x64
 8000630:	bd90      	pop	{r4, r7, pc}
	...

08000634 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	2328      	movs	r3, #40	; 0x28
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	0018      	movs	r0, r3
 8000640:	2310      	movs	r3, #16
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f004 f9b7 	bl	80049b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800064a:	231c      	movs	r3, #28
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	0018      	movs	r0, r3
 8000650:	230c      	movs	r3, #12
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f004 f9af 	bl	80049b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	231c      	movs	r3, #28
 8000660:	001a      	movs	r2, r3
 8000662:	2100      	movs	r1, #0
 8000664:	f004 f9a8 	bl	80049b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000668:	4b2f      	ldr	r3, [pc, #188]	; (8000728 <MX_TIM3_Init+0xf4>)
 800066a:	4a30      	ldr	r2, [pc, #192]	; (800072c <MX_TIM3_Init+0xf8>)
 800066c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000670:	229f      	movs	r2, #159	; 0x9f
 8000672:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800067a:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <MX_TIM3_Init+0xf4>)
 800067c:	2263      	movs	r2, #99	; 0x63
 800067e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b29      	ldr	r3, [pc, #164]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b28      	ldr	r3, [pc, #160]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800068c:	4b26      	ldr	r3, [pc, #152]	; (8000728 <MX_TIM3_Init+0xf4>)
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fd3a 	bl	8002108 <HAL_TIM_Base_Init>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000698:	f000 f9ec 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	2128      	movs	r1, #40	; 0x28
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0152      	lsls	r2, r2, #5
 80006a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006a6:	187a      	adds	r2, r7, r1
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <MX_TIM3_Init+0xf4>)
 80006aa:	0011      	movs	r1, r2
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ffcf 	bl	8002650 <HAL_TIM_ConfigClockSource>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006b6:	f000 f9dd 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_TIM3_Init+0xf4>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 fd7b 	bl	80021b8 <HAL_TIM_PWM_Init>
 80006c2:	1e03      	subs	r3, r0, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80006c6:	f000 f9d5 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	211c      	movs	r1, #28
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d8:	187a      	adds	r2, r7, r1
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_TIM3_Init+0xf4>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 fd78 	bl	80031d4 <HAL_TIMEx_MasterConfigSynchronization>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80006e8:	f000 f9c4 	bl	8000a74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2260      	movs	r2, #96	; 0x60
 80006f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f8:	003b      	movs	r3, r7
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fe:	003b      	movs	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000704:	0039      	movs	r1, r7
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000708:	2200      	movs	r2, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 feaa 	bl	8002464 <HAL_TIM_PWM_ConfigChannel>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000714:	f000 f9ae 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <MX_TIM3_Init+0xf4>)
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fa38 	bl	8000b90 <HAL_TIM_MspPostInit>

}
 8000720:	46c0      	nop			; (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b00e      	add	sp, #56	; 0x38
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000009c 	.word	0x2000009c
 800072c:	40000400 	.word	0x40000400

08000730 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000736:	003b      	movs	r3, r7
 8000738:	0018      	movs	r0, r3
 800073a:	2310      	movs	r3, #16
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f004 f93a 	bl	80049b8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM14_Init+0x8c>)
 8000746:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <MX_TIM14_Init+0x90>)
 8000748:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000-1;
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_TIM14_Init+0x8c>)
 800074c:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <MX_TIM14_Init+0x94>)
 800074e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_TIM14_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_TIM14_Init+0x8c>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <MX_TIM14_Init+0x98>)
 800075a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_TIM14_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM14_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_TIM14_Init+0x8c>)
 800076a:	0018      	movs	r0, r3
 800076c:	f001 fccc 	bl	8002108 <HAL_TIM_Base_Init>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000774:	f000 f97e 	bl	8000a74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_TIM14_Init+0x8c>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fd7c 	bl	8002278 <HAL_TIM_IC_Init>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 f976 	bl	8000a74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000788:	003b      	movs	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800078e:	003b      	movs	r3, r7
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80007a0:	0039      	movs	r1, r7
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_TIM14_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fdc6 	bl	8002338 <HAL_TIM_IC_ConfigChannel>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80007b0:	f000 f960 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b004      	add	sp, #16
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000178 	.word	0x20000178
 80007c0:	40002000 	.word	0x40002000
 80007c4:	00003e7f 	.word	0x00003e7f
 80007c8:	000003e7 	.word	0x000003e7

080007cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007d2:	4a24      	ldr	r2, [pc, #144]	; (8000864 <MX_USART1_UART_Init+0x98>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007d8:	22e1      	movs	r2, #225	; 0xe1
 80007da:	0252      	lsls	r2, r2, #9
 80007dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <MX_USART1_UART_Init+0x94>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <MX_USART1_UART_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fd44 	bl	80032a4 <HAL_UART_Init>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000820:	f000 f928 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000826:	2100      	movs	r1, #0
 8000828:	0018      	movs	r0, r3
 800082a:	f003 ffbb 	bl	80047a4 <HAL_UARTEx_SetTxFifoThreshold>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 f91f 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_USART1_UART_Init+0x94>)
 8000838:	2100      	movs	r1, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f003 fff2 	bl	8004824 <HAL_UARTEx_SetRxFifoThreshold>
 8000840:	1e03      	subs	r3, r0, #0
 8000842:	d001      	beq.n	8000848 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000844:	f000 f916 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <MX_USART1_UART_Init+0x94>)
 800084a:	0018      	movs	r0, r3
 800084c:	f003 ff70 	bl	8004730 <HAL_UARTEx_DisableFifoMode>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000854:	f000 f90e 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	200000e8 	.word	0x200000e8
 8000864:	40013800 	.word	0x40013800

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	2414      	movs	r4, #20
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	2314      	movs	r3, #20
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f004 f89d 	bl	80049b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 8000880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000882:	4b74      	ldr	r3, [pc, #464]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 8000884:	2104      	movs	r1, #4
 8000886:	430a      	orrs	r2, r1
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
 800088a:	4b72      	ldr	r3, [pc, #456]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 800088c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088e:	2204      	movs	r2, #4
 8000890:	4013      	ands	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4b6f      	ldr	r3, [pc, #444]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089a:	4b6e      	ldr	r3, [pc, #440]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 800089c:	2120      	movs	r1, #32
 800089e:	430a      	orrs	r2, r1
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
 80008a2:	4b6c      	ldr	r3, [pc, #432]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a6:	2220      	movs	r2, #32
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b69      	ldr	r3, [pc, #420]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b2:	4b68      	ldr	r3, [pc, #416]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ba:	4b66      	ldr	r3, [pc, #408]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b63      	ldr	r3, [pc, #396]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	4b62      	ldr	r3, [pc, #392]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	4b60      	ldr	r3, [pc, #384]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	4b5d      	ldr	r3, [pc, #372]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008e4:	2108      	movs	r1, #8
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ea:	4b5a      	ldr	r3, [pc, #360]	; (8000a54 <MX_GPIO_Init+0x1ec>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ee:	2208      	movs	r2, #8
 80008f0:	4013      	ands	r3, r2
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, _5V_DRMOS_EN_Pin|_0V9_EN_Pin|_1V2_EN_Pin|DDR0_VPP_PG_Pin, GPIO_PIN_RESET);
 80008f6:	4958      	ldr	r1, [pc, #352]	; (8000a58 <MX_GPIO_Init+0x1f0>)
 80008f8:	4b58      	ldr	r3, [pc, #352]	; (8000a5c <MX_GPIO_Init+0x1f4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fd8b 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, _1V8_EN_Pin|LED_GREEN_Pin|DDR1_VPP_EN_Pin|_3V3_EN_Pin, GPIO_PIN_RESET);
 8000902:	4957      	ldr	r1, [pc, #348]	; (8000a60 <MX_GPIO_Init+0x1f8>)
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	2200      	movs	r2, #0
 800090a:	0018      	movs	r0, r3
 800090c:	f000 fd84 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDR_VTT0_EN_Pin|DDR0_VPP_EN_Pin, GPIO_PIN_RESET);
 8000910:	23a0      	movs	r3, #160	; 0xa0
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	4853      	ldr	r0, [pc, #332]	; (8000a64 <MX_GPIO_Init+0x1fc>)
 8000916:	2200      	movs	r2, #0
 8000918:	0019      	movs	r1, r3
 800091a:	f000 fd7d 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _0V9_PG_Pin _1V2_PG_Pin _0V9_ALERTn_FAULTn_Pin DDR_VTT0_PG_Pin
                           DDR_VTT1_PG_Pin _5V_DRMOS_THWN_Pin DDR1_VPP_PG_Pin */
  GPIO_InitStruct.Pin = _0V9_PG_Pin|_1V2_PG_Pin|_0V9_ALERTn_FAULTn_Pin|DDR_VTT0_PG_Pin
 800091e:	193b      	adds	r3, r7, r4
 8000920:	4a51      	ldr	r2, [pc, #324]	; (8000a68 <MX_GPIO_Init+0x200>)
 8000922:	601a      	str	r2, [r3, #0]
                          |DDR_VTT1_PG_Pin|_5V_DRMOS_THWN_Pin|DDR1_VPP_PG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	22c4      	movs	r2, #196	; 0xc4
 8000928:	0392      	lsls	r2, r2, #14
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	193b      	adds	r3, r7, r4
 8000934:	4a49      	ldr	r2, [pc, #292]	; (8000a5c <MX_GPIO_Init+0x1f4>)
 8000936:	0019      	movs	r1, r3
 8000938:	0010      	movs	r0, r2
 800093a:	f000 fc09 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : _5V_DRMOS_EN_Pin _0V9_EN_Pin _1V2_EN_Pin DDR0_VPP_PG_Pin */
  GPIO_InitStruct.Pin = _5V_DRMOS_EN_Pin|_0V9_EN_Pin|_1V2_EN_Pin|DDR0_VPP_PG_Pin;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a45      	ldr	r2, [pc, #276]	; (8000a58 <MX_GPIO_Init+0x1f0>)
 8000942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2201      	movs	r2, #1
 8000948:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	193b      	adds	r3, r7, r4
 8000958:	4a40      	ldr	r2, [pc, #256]	; (8000a5c <MX_GPIO_Init+0x1f4>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f000 fbf7 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : _1V8_EN_Pin DDR1_VPP_EN_Pin _3V3_EN_Pin */
  GPIO_InitStruct.Pin = _1V8_EN_Pin|DDR1_VPP_EN_Pin|_3V3_EN_Pin;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x204>)
 8000966:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2201      	movs	r2, #1
 800096c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	193a      	adds	r2, r7, r4
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fbe4 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	220c      	movs	r2, #12
 800098c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	2202      	movs	r2, #2
 8000992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2201      	movs	r2, #1
 8000998:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2201      	movs	r2, #1
 80009a4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	193a      	adds	r2, r7, r4
 80009a8:	23a0      	movs	r3, #160	; 0xa0
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 fbce 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2220      	movs	r2, #32
 80009b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2201      	movs	r2, #1
 80009be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	2202      	movs	r2, #2
 80009ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80009cc:	193a      	adds	r2, r7, r4
 80009ce:	23a0      	movs	r3, #160	; 0xa0
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	0011      	movs	r1, r2
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 fbbb 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : DDR_VTT0_EN_Pin DDR0_VPP_EN_Pin */
  GPIO_InitStruct.Pin = DDR_VTT0_EN_Pin|DDR0_VPP_EN_Pin;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	22a0      	movs	r2, #160	; 0xa0
 80009e0:	0212      	lsls	r2, r2, #8
 80009e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	000c      	movs	r4, r1
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2201      	movs	r2, #1
 80009ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <MX_GPIO_Init+0x1fc>)
 80009fc:	0019      	movs	r1, r3
 80009fe:	0010      	movs	r0, r2
 8000a00:	f000 fba6 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pin : DDR_VTT1_EN_Pin */
  GPIO_InitStruct.Pin = DDR_VTT1_EN_Pin;
 8000a04:	0021      	movs	r1, r4
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	01d2      	lsls	r2, r2, #7
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2288      	movs	r2, #136	; 0x88
 8000a12:	0352      	lsls	r2, r2, #13
 8000a14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DDR_VTT1_EN_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	000c      	movs	r4, r1
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x1fc>)
 8000a22:	0019      	movs	r1, r3
 8000a24:	0010      	movs	r0, r2
 8000a26:	f000 fb93 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : _1V8_PG_Pin _3V_3_PG_Pin */
  GPIO_InitStruct.Pin = _1V8_PG_Pin|_3V_3_PG_Pin;
 8000a2a:	0021      	movs	r1, r4
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	22c4      	movs	r2, #196	; 0xc4
 8000a36:	0392      	lsls	r2, r2, #14
 8000a38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <MX_GPIO_Init+0x208>)
 8000a44:	0019      	movs	r1, r3
 8000a46:	0010      	movs	r0, r2
 8000a48:	f000 fb82 	bl	8001150 <HAL_GPIO_Init>

}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00b      	add	sp, #44	; 0x2c
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	0000c101 	.word	0x0000c101
 8000a5c:	50000800 	.word	0x50000800
 8000a60:	00008121 	.word	0x00008121
 8000a64:	50000400 	.word	0x50000400
 8000a68:	00000cbc 	.word	0x00000cbc
 8000a6c:	00008101 	.word	0x00008101
 8000a70:	50000c00 	.word	0x50000c00

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_MspInit+0x4c>)
 8000a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	641a      	str	r2, [r3, #64]	; 0x40
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	2201      	movs	r2, #1
 8000a98:	4013      	ands	r3, r2
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0549      	lsls	r1, r1, #21
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <HAL_MspInit+0x4c>)
 8000aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	055b      	lsls	r3, r3, #21
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000aba:	23c0      	movs	r3, #192	; 0xc0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fa7c 	bl	8000fbc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	2314      	movs	r3, #20
 8000ada:	18fb      	adds	r3, r7, r3
 8000adc:	0018      	movs	r0, r3
 8000ade:	2314      	movs	r3, #20
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f003 ff68 	bl	80049b8 <memset>
  if(htim_base->Instance==TIM3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a24      	ldr	r2, [pc, #144]	; (8000b80 <HAL_TIM_Base_MspInit+0xb0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d10c      	bne.n	8000b0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000af8:	2102      	movs	r1, #2
 8000afa:	430a      	orrs	r2, r1
 8000afc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b02:	2202      	movs	r2, #2
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000b0a:	e035      	b.n	8000b78 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM14)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_TIM_Base_MspInit+0xb8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d130      	bne.n	8000b78 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b1c:	2180      	movs	r1, #128	; 0x80
 8000b1e:	0209      	lsls	r1, r1, #8
 8000b20:	430a      	orrs	r2, r1
 8000b22:	641a      	str	r2, [r3, #64]	; 0x40
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	021b      	lsls	r3, r3, #8
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b38:	2104      	movs	r1, #4
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_TIM_Base_MspInit+0xb4>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b42:	2204      	movs	r2, #4
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BMC_FAN1_TACH_Pin;
 8000b4a:	2114      	movs	r1, #20
 8000b4c:	187b      	adds	r3, r7, r1
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	0152      	lsls	r2, r2, #5
 8000b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2202      	movs	r2, #2
 8000b6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BMC_FAN1_TACH_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_TIM_Base_MspInit+0xbc>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f000 faec 	bl	8001150 <HAL_GPIO_Init>
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b00a      	add	sp, #40	; 0x28
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40000400 	.word	0x40000400
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40002000 	.word	0x40002000
 8000b8c:	50000800 	.word	0x50000800

08000b90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	240c      	movs	r4, #12
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	2314      	movs	r3, #20
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f003 ff08 	bl	80049b8 <memset>
  if(htim->Instance==TIM3)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a14      	ldr	r2, [pc, #80]	; (8000c00 <HAL_TIM_MspPostInit+0x70>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d121      	bne.n	8000bf6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_TIM_MspPostInit+0x74>)
 8000bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_TIM_MspPostInit+0x74>)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_TIM_MspPostInit+0x74>)
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = BMC_FAN1_PWM_Pin;
 8000bca:	0021      	movs	r1, r4
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2240      	movs	r2, #64	; 0x40
 8000bd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2201      	movs	r2, #1
 8000be8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BMC_FAN1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_TIM_MspPostInit+0x78>)
 8000bee:	0019      	movs	r1, r3
 8000bf0:	0010      	movs	r0, r2
 8000bf2:	f000 faad 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b009      	add	sp, #36	; 0x24
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	40000400 	.word	0x40000400
 8000c04:	40021000 	.word	0x40021000
 8000c08:	50000800 	.word	0x50000800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b08b      	sub	sp, #44	; 0x2c
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	2414      	movs	r4, #20
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	0018      	movs	r0, r3
 8000c1a:	2314      	movs	r3, #20
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f003 feca 	bl	80049b8 <memset>
  if(huart->Instance==USART1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d131      	bne.n	8000c92 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	01c9      	lsls	r1, r1, #7
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	22c0      	movs	r2, #192	; 0xc0
 8000c66:	00d2      	lsls	r2, r2, #3
 8000c68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	0021      	movs	r1, r4
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2202      	movs	r2, #2
 8000c70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2201      	movs	r2, #1
 8000c82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	187a      	adds	r2, r7, r1
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fa5f 	bl	8001150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b00b      	add	sp, #44	; 0x2c
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f938 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e00a      	b.n	8000cfa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ce4:	e000      	b.n	8000ce8 <_read+0x16>
 8000ce6:	bf00      	nop
 8000ce8:	0001      	movs	r1, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	60ba      	str	r2, [r7, #8]
 8000cf0:	b2ca      	uxtb	r2, r1
 8000cf2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	dbf0      	blt.n	8000ce4 <_read+0x12>
	}

return len;
 8000d02:	687b      	ldr	r3, [r7, #4]
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b006      	add	sp, #24
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e009      	b.n	8000d32 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	60ba      	str	r2, [r7, #8]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff fbf8 	bl	800051c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697a      	ldr	r2, [r7, #20]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dbf1      	blt.n	8000d1e <_write+0x12>
	}
	return len;
 8000d3a:	687b      	ldr	r3, [r7, #4]
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b006      	add	sp, #24
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_close>:

int _close(int file)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	return -1;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	425b      	negs	r3, r3
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	0192      	lsls	r2, r2, #6
 8000d68:	605a      	str	r2, [r3, #4]
	return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_isatty>:

int _isatty(int file)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	0018      	movs	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b002      	add	sp, #8
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	60f8      	str	r0, [r7, #12]
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
	return 0;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b004      	add	sp, #16
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f003 fdca 	bl	8004964 <__errno>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	425b      	negs	r3, r3
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	18d2      	adds	r2, r2, r3
 8000dea:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b006      	add	sp, #24
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20009000 	.word	0x20009000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	2000008c 	.word	0x2000008c
 8000e04:	200001d8 	.word	0x200001d8

08000e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e14:	480d      	ldr	r0, [pc, #52]	; (8000e4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e18:	f7ff fff6 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopForever+0xe>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopForever+0x16>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e42:	f003 fd95 	bl	8004970 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e46:	f7ff fb7b 	bl	8000540 <main>

08000e4a <LoopForever>:

LoopForever:
  b LoopForever
 8000e4a:	e7fe      	b.n	8000e4a <LoopForever>
  ldr   r0, =_estack
 8000e4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e58:	08005ae4 	.word	0x08005ae4
  ldr r2, =_sbss
 8000e5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e60:	200001d8 	.word	0x200001d8

08000e64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_Init+0x3c>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Init+0x3c>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	0049      	lsls	r1, r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f810 	bl	8000ea8 <HAL_InitTick>
 8000e88:	1e03      	subs	r3, r0, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e001      	b.n	8000e98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fdf4 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b002      	add	sp, #8
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_InitTick+0x88>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d02b      	beq.n	8000f18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_InitTick+0x8c>)
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_InitTick+0x88>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	0019      	movs	r1, r3
 8000eca:	23fa      	movs	r3, #250	; 0xfa
 8000ecc:	0098      	lsls	r0, r3, #2
 8000ece:	f7ff f921 	bl	8000114 <__udivsi3>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	0020      	movs	r0, r4
 8000ed8:	f7ff f91c 	bl	8000114 <__udivsi3>
 8000edc:	0003      	movs	r3, r0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f929 	bl	8001136 <HAL_SYSTICK_Config>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d112      	bne.n	8000f0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d80a      	bhi.n	8000f04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 f908 	bl	800110c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_InitTick+0x90>)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e00d      	b.n	8000f20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e008      	b.n	8000f20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f0e:	230f      	movs	r3, #15
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e003      	b.n	8000f20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	781b      	ldrb	r3, [r3, #0]
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b005      	add	sp, #20
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	18d2      	adds	r2, r2, r3
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	200001c4 	.word	0x200001c4

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	200001c4 	.word	0x200001c4

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001a      	movs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	189b      	adds	r3, r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	20000008 	.word	0x20000008

08000fbc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	0019      	movs	r1, r3
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	fffff9ff 	.word	0xfffff9ff

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffc:	d828      	bhi.n	8001050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <__NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	33c0      	adds	r3, #192	; 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	589b      	ldr	r3, [r3, r2]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	481f      	ldr	r0, [pc, #124]	; (80010bc <__NVIC_SetPriority+0xd4>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	33c0      	adds	r3, #192	; 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104e:	e031      	b.n	80010b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0019      	movs	r1, r3
 8001058:	230f      	movs	r3, #15
 800105a:	400b      	ands	r3, r1
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3306      	adds	r3, #6
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	; 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	; 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001c      	movs	r4, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18c3      	adds	r3, r0, r3
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d301      	bcc.n	80010dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d8:	2301      	movs	r3, #1
 80010da:	e010      	b.n	80010fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <SysTick_Config+0x44>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff7c 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SysTick_Config+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SysTick_Config+0x44>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>
}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ffbf 	bl	80010c4 <SysTick_Config>
 8001146:	0003      	movs	r3, r0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e147      	b.n	80013f0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x28>
 8001176:	e138      	b.n	80013ea <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	4013      	ands	r3, r2
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	409a      	lsls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	2201      	movs	r2, #1
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2203      	movs	r2, #3
 8001234:	4013      	ands	r3, r2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2207      	movs	r2, #7
 800124c:	4013      	ands	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2107      	movs	r1, #7
 8001266:	400b      	ands	r3, r1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	401a      	ands	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	23c0      	movs	r3, #192	; 0xc0
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4013      	ands	r3, r2
 80012c0:	d100      	bne.n	80012c4 <HAL_GPIO_Init+0x174>
 80012c2:	e092      	b.n	80013ea <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012c4:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3318      	adds	r3, #24
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	589b      	ldr	r3, [r3, r2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4013      	ands	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	220f      	movs	r2, #15
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	43da      	mvns	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	23a0      	movs	r3, #160	; 0xa0
 80012ec:	05db      	lsls	r3, r3, #23
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x1ca>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a45      	ldr	r2, [pc, #276]	; (800140c <HAL_GPIO_Init+0x2bc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x1c6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a44      	ldr	r2, [pc, #272]	; (8001410 <HAL_GPIO_Init+0x2c0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x1c2>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a43      	ldr	r2, [pc, #268]	; (8001414 <HAL_GPIO_Init+0x2c4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x1be>
 800130a:	2303      	movs	r3, #3
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 800130e:	2305      	movs	r3, #5
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x1cc>
 800131a:	2300      	movs	r3, #0
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	2103      	movs	r1, #3
 8001320:	400a      	ands	r2, r1
 8001322:	00d2      	lsls	r2, r2, #3
 8001324:	4093      	lsls	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800132c:	4936      	ldr	r1, [pc, #216]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3318      	adds	r3, #24
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	58d3      	ldr	r3, [r2, r3]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	4013      	ands	r3, r2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001360:	4929      	ldr	r1, [pc, #164]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001368:	4a27      	ldr	r2, [pc, #156]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 800136a:	2384      	movs	r3, #132	; 0x84
 800136c:	58d3      	ldr	r3, [r2, r3]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43da      	mvns	r2, r3
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	029b      	lsls	r3, r3, #10
 8001382:	4013      	ands	r3, r2
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138e:	491e      	ldr	r1, [pc, #120]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 8001390:	2284      	movs	r2, #132	; 0x84
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43da      	mvns	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	035b      	lsls	r3, r3, #13
 80013ae:	4013      	ands	r3, r2
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ba:	4b13      	ldr	r3, [pc, #76]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43da      	mvns	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	039b      	lsls	r3, r3, #14
 80013d8:	4013      	ands	r3, r2
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <HAL_GPIO_Init+0x2b8>)
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	40da      	lsrs	r2, r3
 80013f8:	1e13      	subs	r3, r2, #0
 80013fa:	d000      	beq.n	80013fe <HAL_GPIO_Init+0x2ae>
 80013fc:	e6b0      	b.n	8001160 <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b006      	add	sp, #24
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021800 	.word	0x40021800
 800140c:	50000400 	.word	0x50000400
 8001410:	50000800 	.word	0x50000800
 8001414:	50000c00 	.word	0x50000c00

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	0008      	movs	r0, r1
 8001422:	0011      	movs	r1, r2
 8001424:	1cbb      	adds	r3, r7, #2
 8001426:	1c02      	adds	r2, r0, #0
 8001428:	801a      	strh	r2, [r3, #0]
 800142a:	1c7b      	adds	r3, r7, #1
 800142c:	1c0a      	adds	r2, r1, #0
 800142e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001430:	1c7b      	adds	r3, r7, #1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001438:	1cbb      	adds	r3, r7, #2
 800143a:	881a      	ldrh	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001440:	e003      	b.n	800144a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001442:	1cbb      	adds	r3, r7, #2
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	000a      	movs	r2, r1
 800145c:	1cbb      	adds	r3, r7, #2
 800145e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001466:	1cbb      	adds	r3, r7, #2
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	041a      	lsls	r2, r3, #16
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	1cb9      	adds	r1, r7, #2
 8001476:	8809      	ldrh	r1, [r1, #0]
 8001478:	400b      	ands	r3, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001496:	4013      	ands	r3, r2
 8001498:	0019      	movs	r1, r3
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d11f      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	0013      	movs	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4912      	ldr	r1, [pc, #72]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7fe fe2a 	bl	8000114 <__udivsi3>
 80014c0:	0003      	movs	r3, r0
 80014c2:	3301      	adds	r3, #1
 80014c4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c6:	e008      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	e001      	b.n	80014da <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e009      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	401a      	ands	r2, r3
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d0ed      	beq.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	40007000 	.word	0x40007000
 80014fc:	fffff9ff 	.word	0xfffff9ff
 8001500:	20000000 	.word	0x20000000
 8001504:	000f4240 	.word	0x000f4240

08001508 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <LL_RCC_GetAPB1Prescaler+0x14>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	23e0      	movs	r3, #224	; 0xe0
 8001512:	01db      	lsls	r3, r3, #7
 8001514:	4013      	ands	r3, r2
}
 8001516:	0018      	movs	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e2f9      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4013      	ands	r3, r2
 800153a:	d100      	bne.n	800153e <HAL_RCC_OscConfig+0x1e>
 800153c:	e07c      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153e:	4bc3      	ldr	r3, [pc, #780]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2238      	movs	r2, #56	; 0x38
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001548:	4bc0      	ldr	r3, [pc, #768]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
 8001550:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b10      	cmp	r3, #16
 8001556:	d102      	bne.n	800155e <HAL_RCC_OscConfig+0x3e>
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d002      	beq.n	8001564 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	2b08      	cmp	r3, #8
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4bb9      	ldr	r3, [pc, #740]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4013      	ands	r3, r2
 800156e:	d062      	beq.n	8001636 <HAL_RCC_OscConfig+0x116>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15e      	bne.n	8001636 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e2d4      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	429a      	cmp	r2, r3
 8001586:	d107      	bne.n	8001598 <HAL_RCC_OscConfig+0x78>
 8001588:	4bb0      	ldr	r3, [pc, #704]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4baf      	ldr	r3, [pc, #700]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0249      	lsls	r1, r1, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e020      	b.n	80015da <HAL_RCC_OscConfig+0xba>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	23a0      	movs	r3, #160	; 0xa0
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10e      	bne.n	80015c2 <HAL_RCC_OscConfig+0xa2>
 80015a4:	4ba9      	ldr	r3, [pc, #676]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4ba8      	ldr	r3, [pc, #672]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	02c9      	lsls	r1, r1, #11
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	4ba6      	ldr	r3, [pc, #664]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4ba5      	ldr	r3, [pc, #660]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0249      	lsls	r1, r1, #9
 80015bc:	430a      	orrs	r2, r1
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0xba>
 80015c2:	4ba2      	ldr	r3, [pc, #648]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4ba1      	ldr	r3, [pc, #644]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015c8:	49a1      	ldr	r1, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x330>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	4b9f      	ldr	r3, [pc, #636]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4b9e      	ldr	r3, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80015d4:	499f      	ldr	r1, [pc, #636]	; (8001854 <HAL_RCC_OscConfig+0x334>)
 80015d6:	400a      	ands	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d014      	beq.n	800160c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e2:	f7ff fcbd 	bl	8000f60 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fcb8 	bl	8000f60 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e293      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4b93      	ldr	r3, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0xcc>
 800160a:	e015      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fca8 	bl	8000f60 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001616:	f7ff fca3 	bl	8000f60 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	; 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e27e      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001628:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	029b      	lsls	r3, r3, #10
 8001630:	4013      	ands	r3, r2
 8001632:	d1f0      	bne.n	8001616 <HAL_RCC_OscConfig+0xf6>
 8001634:	e000      	b.n	8001638 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d100      	bne.n	8001644 <HAL_RCC_OscConfig+0x124>
 8001642:	e099      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001644:	4b81      	ldr	r3, [pc, #516]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2238      	movs	r2, #56	; 0x38
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800164e:	4b7f      	ldr	r3, [pc, #508]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2203      	movs	r2, #3
 8001654:	4013      	ands	r3, r2
 8001656:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x144>
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d002      	beq.n	800166a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d135      	bne.n	80016d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800166a:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4013      	ands	r3, r2
 8001674:	d005      	beq.n	8001682 <HAL_RCC_OscConfig+0x162>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e251      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b72      	ldr	r3, [pc, #456]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a74      	ldr	r2, [pc, #464]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 8001688:	4013      	ands	r3, r2
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	4b6e      	ldr	r3, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800169e:	4b6b      	ldr	r3, [pc, #428]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a6e      	ldr	r2, [pc, #440]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016b2:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
 80016bc:	4a68      	ldr	r2, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x340>)
 80016be:	40da      	lsrs	r2, r3
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x344>)
 80016c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c4:	4b68      	ldr	r3, [pc, #416]	; (8001868 <HAL_RCC_OscConfig+0x348>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fbed 	bl	8000ea8 <HAL_InitTick>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d051      	beq.n	8001776 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e227      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d030      	beq.n	8001740 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_RCC_OscConfig+0x33c>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0049      	lsls	r1, r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fc2e 	bl	8000f60 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff fc29 	bl	8000f60 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e204      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4013      	ands	r3, r2
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_RCC_OscConfig+0x338>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	4b44      	ldr	r3, [pc, #272]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e01b      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001746:	4949      	ldr	r1, [pc, #292]	; (800186c <HAL_RCC_OscConfig+0x34c>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fc08 	bl	8000f60 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc03 	bl	8000f60 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1de      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x236>
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2208      	movs	r2, #8
 800177e:	4013      	ands	r3, r2
 8001780:	d047      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2238      	movs	r2, #56	; 0x38
 8001788:	4013      	ands	r3, r2
 800178a:	2b18      	cmp	r3, #24
 800178c:	d10a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800178e:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d03c      	beq.n	8001812 <HAL_RCC_OscConfig+0x2f2>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d138      	bne.n	8001812 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e1c0      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d019      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	430a      	orrs	r2, r1
 80017b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fbd2 	bl	8000f60 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c2:	f7ff fbcd 	bl	8000f60 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a8      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d4:	4b1d      	ldr	r3, [pc, #116]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	2202      	movs	r2, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d0f1      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2a2>
 80017de:	e018      	b.n	8001812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017e0:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 80017e6:	2101      	movs	r1, #1
 80017e8:	438a      	bics	r2, r1
 80017ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fbb8 	bl	8000f60 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fbb3 	bl	8000f60 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e18e      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f1      	bne.n	80017f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2204      	movs	r2, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x2fe>
 800181c:	e0c6      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	231f      	movs	r3, #31
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2200      	movs	r2, #0
 8001824:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2238      	movs	r2, #56	; 0x38
 800182c:	4013      	ands	r3, r2
 800182e:	2b20      	cmp	r3, #32
 8001830:	d11e      	bne.n	8001870 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x32c>)
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d100      	bne.n	800183e <HAL_RCC_OscConfig+0x31e>
 800183c:	e0b6      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d000      	beq.n	8001848 <HAL_RCC_OscConfig+0x328>
 8001846:	e0b1      	b.n	80019ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e16c      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
 800184c:	40021000 	.word	0x40021000
 8001850:	fffeffff 	.word	0xfffeffff
 8001854:	fffbffff 	.word	0xfffbffff
 8001858:	ffff80ff 	.word	0xffff80ff
 800185c:	ffffc7ff 	.word	0xffffc7ff
 8001860:	00f42400 	.word	0x00f42400
 8001864:	20000000 	.word	0x20000000
 8001868:	20000004 	.word	0x20000004
 800186c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001870:	4baf      	ldr	r3, [pc, #700]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	055b      	lsls	r3, r3, #21
 8001878:	4013      	ands	r3, r2
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x360>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <HAL_RCC_OscConfig+0x362>
 8001880:	2300      	movs	r3, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d011      	beq.n	80018aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4baa      	ldr	r3, [pc, #680]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800188a:	4ba9      	ldr	r3, [pc, #676]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800188c:	2180      	movs	r1, #128	; 0x80
 800188e:	0549      	lsls	r1, r1, #21
 8001890:	430a      	orrs	r2, r1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c
 8001894:	4ba6      	ldr	r3, [pc, #664]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	055b      	lsls	r3, r3, #21
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018a2:	231f      	movs	r3, #31
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018aa:	4ba2      	ldr	r3, [pc, #648]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4013      	ands	r3, r2
 80018b4:	d11a      	bne.n	80018ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b6:	4b9f      	ldr	r3, [pc, #636]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b9e      	ldr	r3, [pc, #632]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	0049      	lsls	r1, r1, #1
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fb4c 	bl	8000f60 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ce:	f7ff fb47 	bl	8000f60 <HAL_GetTick>
 80018d2:	0002      	movs	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e122      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x614>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x3e2>
 80018f4:	4b8e      	ldr	r3, [pc, #568]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80018f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018f8:	4b8d      	ldr	r3, [pc, #564]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	2b05      	cmp	r3, #5
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x404>
 800190a:	4b89      	ldr	r3, [pc, #548]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800190c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001910:	2104      	movs	r1, #4
 8001912:	430a      	orrs	r2, r1
 8001914:	65da      	str	r2, [r3, #92]	; 0x5c
 8001916:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	65da      	str	r2, [r3, #92]	; 0x5c
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0x41c>
 8001924:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001928:	4b81      	ldr	r3, [pc, #516]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001930:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001934:	4b7e      	ldr	r3, [pc, #504]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001936:	2104      	movs	r1, #4
 8001938:	438a      	bics	r2, r1
 800193a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d014      	beq.n	800196e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fb0c 	bl	8000f60 <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194c:	e009      	b.n	8001962 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fb07 	bl	8000f60 <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	4a77      	ldr	r2, [pc, #476]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0e1      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001962:	4b73      	ldr	r3, [pc, #460]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	2202      	movs	r2, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x42e>
 800196c:	e013      	b.n	8001996 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff faf7 	bl	8000f60 <HAL_GetTick>
 8001972:	0003      	movs	r3, r0
 8001974:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001976:	e009      	b.n	800198c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001978:	f7ff faf2 	bl	8000f60 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a6d      	ldr	r2, [pc, #436]	; (8001b38 <HAL_RCC_OscConfig+0x618>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0cc      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001996:	231f      	movs	r3, #31
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d105      	bne.n	80019ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019a4:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019a6:	4965      	ldr	r1, [pc, #404]	; (8001b3c <HAL_RCC_OscConfig+0x61c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69db      	ldr	r3, [r3, #28]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x496>
 80019b4:	e0b6      	b.n	8001b24 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b6:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2238      	movs	r2, #56	; 0x38
 80019bc:	4013      	ands	r3, r2
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d100      	bne.n	80019c4 <HAL_RCC_OscConfig+0x4a4>
 80019c2:	e07e      	b.n	8001ac2 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d153      	bne.n	8001a74 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019d2:	495b      	ldr	r1, [pc, #364]	; (8001b40 <HAL_RCC_OscConfig+0x620>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff fac2 	bl	8000f60 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e2:	f7ff fabd 	bl	8000f60 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e098      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f4:	4b4e      	ldr	r3, [pc, #312]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	049b      	lsls	r3, r3, #18
 80019fc:	4013      	ands	r3, r2
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a4f      	ldr	r2, [pc, #316]	; (8001b44 <HAL_RCC_OscConfig+0x624>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1a      	ldr	r2, [r3, #32]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	021b      	lsls	r3, r3, #8
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	431a      	orrs	r2, r3
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2e:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0449      	lsls	r1, r1, #17
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a3c:	4b3c      	ldr	r3, [pc, #240]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a42:	2180      	movs	r1, #128	; 0x80
 8001a44:	0549      	lsls	r1, r1, #21
 8001a46:	430a      	orrs	r2, r1
 8001a48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa89 	bl	8000f60 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fa84 	bl	8000f60 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e05f      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	2380      	movs	r3, #128	; 0x80
 8001a6c:	049b      	lsls	r3, r3, #18
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x534>
 8001a72:	e057      	b.n	8001b24 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a7a:	4931      	ldr	r1, [pc, #196]	; (8001b40 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a86:	2103      	movs	r1, #3
 8001a88:	438a      	bics	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001a92:	492d      	ldr	r1, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x628>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa62 	bl	8000f60 <HAL_GetTick>
 8001a9c:	0003      	movs	r3, r0
 8001a9e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff fa5d 	bl	8000f60 <HAL_GetTick>
 8001aa6:	0002      	movs	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e038      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	049b      	lsls	r3, r3, #18
 8001abc:	4013      	ands	r3, r2
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x582>
 8001ac0:	e030      	b.n	8001b24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e02b      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_RCC_OscConfig+0x610>)
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d11e      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2270      	movs	r2, #112	; 0x70
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d117      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	23fe      	movs	r3, #254	; 0xfe
 8001af4:	01db      	lsls	r3, r3, #7
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10e      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	23f8      	movs	r3, #248	; 0xf8
 8001b06:	039b      	lsls	r3, r3, #14
 8001b08:	401a      	ands	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	0f5b      	lsrs	r3, r3, #29
 8001b16:	075a      	lsls	r2, r3, #29
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b008      	add	sp, #32
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
 8001b38:	00001388 	.word	0x00001388
 8001b3c:	efffffff 	.word	0xefffffff
 8001b40:	feffffff 	.word	0xfeffffff
 8001b44:	1fc1808c 	.word	0x1fc1808c
 8001b48:	effeffff 	.word	0xeffeffff

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0e9      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2207      	movs	r2, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d91e      	bls.n	8001bac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2207      	movs	r2, #7
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f9ee 	bl	8000f60 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8a:	f7ff f9e9 	bl	8000f60 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0ca      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9e:	4b67      	ldr	r3, [pc, #412]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1ee      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d006      	beq.n	8001bce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bc0:	4b60      	ldr	r3, [pc, #384]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b5f      	ldr	r3, [pc, #380]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc6:	21e0      	movs	r1, #224	; 0xe0
 8001bc8:	01c9      	lsls	r1, r1, #7
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a5d      	ldr	r2, [pc, #372]	; (8001d48 <HAL_RCC_ClockConfig+0x1fc>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4013      	ands	r3, r2
 8001bea:	d057      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	029b      	lsls	r3, r3, #10
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d12b      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e097      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0c:	4b4d      	ldr	r3, [pc, #308]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	049b      	lsls	r3, r3, #18
 8001c14:	4013      	ands	r3, r2
 8001c16:	d11f      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e08b      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d113      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e07f      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c3c:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e074      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e06d      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b3a      	ldr	r3, [pc, #232]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f978 	bl	8000f60 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f7ff f973 	bl	8000f60 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e054      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2238      	movs	r2, #56	; 0x38
 8001c90:	401a      	ands	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1ec      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d21e      	bcs.n	8001ce8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2207      	movs	r2, #7
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f950 	bl	8000f60 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cc4:	e009      	b.n	8001cda <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7ff f94b 	bl	8000f60 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_RCC_ClockConfig+0x1f4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e02c      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2207      	movs	r2, #7
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1ee      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2204      	movs	r2, #4
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_ClockConfig+0x200>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d06:	f000 f829 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d0a:	0001      	movs	r1, r0
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	220f      	movs	r2, #15
 8001d14:	401a      	ands	r2, r3
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_RCC_ClockConfig+0x204>)
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	58d3      	ldr	r3, [r2, r3]
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	4013      	ands	r3, r2
 8001d20:	000a      	movs	r2, r1
 8001d22:	40da      	lsrs	r2, r3
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x208>)
 8001d26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x20c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff f8bb 	bl	8000ea8 <HAL_InitTick>
 8001d32:	0003      	movs	r3, r0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	00001388 	.word	0x00001388
 8001d44:	40021000 	.word	0x40021000
 8001d48:	fffff0ff 	.word	0xfffff0ff
 8001d4c:	ffff8fff 	.word	0xffff8fff
 8001d50:	08005968 	.word	0x08005968
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d62:	4b3c      	ldr	r3, [pc, #240]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2238      	movs	r2, #56	; 0x38
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0adb      	lsrs	r3, r3, #11
 8001d72:	2207      	movs	r2, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	2201      	movs	r2, #1
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	4835      	ldr	r0, [pc, #212]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d82:	f7fe f9c7 	bl	8000114 <__udivsi3>
 8001d86:	0003      	movs	r3, r0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e05d      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2238      	movs	r2, #56	; 0x38
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d98:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2238      	movs	r2, #56	; 0x38
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d138      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2203      	movs	r2, #3
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	2207      	movs	r2, #7
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d10d      	bne.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	4824      	ldr	r0, [pc, #144]	; (8001e5c <HAL_RCC_GetSysClockFreq+0x100>)
 8001dcc:	f7fe f9a2 	bl	8000114 <__udivsi3>
 8001dd0:	0003      	movs	r3, r0
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	227f      	movs	r2, #127	; 0x7f
 8001ddc:	4013      	ands	r3, r2
 8001dde:	434b      	muls	r3, r1
 8001de0:	617b      	str	r3, [r7, #20]
        break;
 8001de2:	e00d      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	481c      	ldr	r0, [pc, #112]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001de8:	f7fe f994 	bl	8000114 <__udivsi3>
 8001dec:	0003      	movs	r3, r0
 8001dee:	0019      	movs	r1, r3
 8001df0:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	227f      	movs	r2, #127	; 0x7f
 8001df8:	4013      	ands	r3, r2
 8001dfa:	434b      	muls	r3, r1
 8001dfc:	617b      	str	r3, [r7, #20]
        break;
 8001dfe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0f5b      	lsrs	r3, r3, #29
 8001e06:	2207      	movs	r2, #7
 8001e08:	4013      	ands	r3, r2
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	6978      	ldr	r0, [r7, #20]
 8001e12:	f7fe f97f 	bl	8000114 <__udivsi3>
 8001e16:	0003      	movs	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	e015      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2238      	movs	r2, #56	; 0x38
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d103      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2238      	movs	r2, #56	; 0x38
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b18      	cmp	r3, #24
 8001e3a:	d103      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e3c:	23fa      	movs	r3, #250	; 0xfa
 8001e3e:	01db      	lsls	r3, r3, #7
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	e001      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e48:	693b      	ldr	r3, [r7, #16]
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b006      	add	sp, #24
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000
 8001e58:	00f42400 	.word	0x00f42400
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b02      	ldr	r3, [pc, #8]	; (8001e70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	0018      	movs	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e78:	f7ff fff2 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e7c:	0004      	movs	r4, r0
 8001e7e:	f7ff fb43 	bl	8001508 <LL_RCC_GetAPB1Prescaler>
 8001e82:	0003      	movs	r3, r0
 8001e84:	0b1a      	lsrs	r2, r3, #12
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	58d3      	ldr	r3, [r2, r3]
 8001e8c:	221f      	movs	r2, #31
 8001e8e:	4013      	ands	r3, r2
 8001e90:	40dc      	lsrs	r4, r3
 8001e92:	0023      	movs	r3, r4
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	080059a8 	.word	0x080059a8

08001ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ea8:	2313      	movs	r3, #19
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ec4:	e0a3      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2011      	movs	r0, #17
 8001ec8:	183b      	adds	r3, r7, r0
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b86      	ldr	r3, [pc, #536]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	055b      	lsls	r3, r3, #21
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d110      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b83      	ldr	r3, [pc, #524]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ede:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0549      	lsls	r1, r1, #21
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ee8:	4b7f      	ldr	r3, [pc, #508]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efc:	4b7b      	ldr	r3, [pc, #492]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b7a      	ldr	r3, [pc, #488]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0049      	lsls	r1, r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f0a:	f7ff f829 	bl	8000f60 <HAL_GetTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f12:	e00b      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff f824 	bl	8000f60 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d904      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001f22:	2313      	movs	r3, #19
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	2203      	movs	r2, #3
 8001f28:	701a      	strb	r2, [r3, #0]
        break;
 8001f2a:	e005      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f2c:	4b6f      	ldr	r3, [pc, #444]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d0ed      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001f38:	2313      	movs	r3, #19
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d154      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f42:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d019      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d014      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f5e:	4b62      	ldr	r3, [pc, #392]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	4a63      	ldr	r2, [pc, #396]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f68:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f6c:	4b5e      	ldr	r3, [pc, #376]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0249      	lsls	r1, r1, #9
 8001f72:	430a      	orrs	r2, r1
 8001f74:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f76:	4b5c      	ldr	r3, [pc, #368]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f7c:	495d      	ldr	r1, [pc, #372]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f7e:	400a      	ands	r2, r1
 8001f80:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f82:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d016      	beq.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7fe ffe6 	bl	8000f60 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f98:	e00c      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe ffe1 	bl	8000f60 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	4a54      	ldr	r2, [pc, #336]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d904      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001faa:	2313      	movs	r3, #19
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2203      	movs	r2, #3
 8001fb0:	701a      	strb	r2, [r3, #0]
            break;
 8001fb2:	e004      	b.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb4:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d0ed      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001fbe:	2313      	movs	r3, #19
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	4a48      	ldr	r2, [pc, #288]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fdc:	e00c      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fde:	2312      	movs	r3, #18
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2213      	movs	r2, #19
 8001fe4:	18ba      	adds	r2, r7, r2
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e005      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	2312      	movs	r3, #18
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2213      	movs	r2, #19
 8001ff2:	18ba      	adds	r2, r7, r2
 8001ff4:	7812      	ldrb	r2, [r2, #0]
 8001ff6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff8:	2311      	movs	r3, #17
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002008:	493c      	ldr	r1, [pc, #240]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800200a:	400a      	ands	r2, r1
 800200c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d009      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002018:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800201a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201c:	2203      	movs	r2, #3
 800201e:	4393      	bics	r3, r2
 8002020:	0019      	movs	r1, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2202      	movs	r2, #2
 8002032:	4013      	ands	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	220c      	movs	r2, #12
 800203c:	4393      	bics	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002046:	430a      	orrs	r2, r1
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2220      	movs	r2, #32
 8002050:	4013      	ands	r3, r2
 8002052:	d009      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002064:	430a      	orrs	r2, r1
 8002066:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	01db      	lsls	r3, r3, #7
 8002070:	4013      	ands	r3, r2
 8002072:	d015      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	0899      	lsrs	r1, r3, #2
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002082:	430a      	orrs	r2, r1
 8002084:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	05db      	lsls	r3, r3, #23
 800208e:	429a      	cmp	r2, r3
 8002090:	d106      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0249      	lsls	r1, r1, #9
 800209c:	430a      	orrs	r2, r1
 800209e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4013      	ands	r3, r2
 80020aa:	d016      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	4a14      	ldr	r2, [pc, #80]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	0019      	movs	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	01db      	lsls	r3, r3, #7
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	0249      	lsls	r1, r1, #9
 80020d6:	430a      	orrs	r2, r1
 80020d8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80020da:	2312      	movs	r3, #18
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	781b      	ldrb	r3, [r3, #0]
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b006      	add	sp, #24
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40007000 	.word	0x40007000
 80020f0:	fffffcff 	.word	0xfffffcff
 80020f4:	fffeffff 	.word	0xfffeffff
 80020f8:	00001388 	.word	0x00001388
 80020fc:	efffffff 	.word	0xefffffff
 8002100:	ffffcfff 	.word	0xffffcfff
 8002104:	ffff3fff 	.word	0xffff3fff

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e04a      	b.n	80021b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223d      	movs	r2, #61	; 0x3d
 800211e:	5c9b      	ldrb	r3, [r3, r2]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	223c      	movs	r2, #60	; 0x3c
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe fccd 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223d      	movs	r2, #61	; 0x3d
 800213a:	2102      	movs	r1, #2
 800213c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3304      	adds	r3, #4
 8002146:	0019      	movs	r1, r3
 8002148:	0010      	movs	r0, r2
 800214a:	f000 fb4d 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2248      	movs	r2, #72	; 0x48
 8002152:	2101      	movs	r1, #1
 8002154:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	223e      	movs	r2, #62	; 0x3e
 800215a:	2101      	movs	r1, #1
 800215c:	5499      	strb	r1, [r3, r2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	223f      	movs	r2, #63	; 0x3f
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2240      	movs	r2, #64	; 0x40
 800216a:	2101      	movs	r1, #1
 800216c:	5499      	strb	r1, [r3, r2]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2241      	movs	r2, #65	; 0x41
 8002172:	2101      	movs	r1, #1
 8002174:	5499      	strb	r1, [r3, r2]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2242      	movs	r2, #66	; 0x42
 800217a:	2101      	movs	r1, #1
 800217c:	5499      	strb	r1, [r3, r2]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2243      	movs	r2, #67	; 0x43
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2244      	movs	r2, #68	; 0x44
 800218a:	2101      	movs	r1, #1
 800218c:	5499      	strb	r1, [r3, r2]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2245      	movs	r2, #69	; 0x45
 8002192:	2101      	movs	r1, #1
 8002194:	5499      	strb	r1, [r3, r2]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2246      	movs	r2, #70	; 0x46
 800219a:	2101      	movs	r1, #1
 800219c:	5499      	strb	r1, [r3, r2]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2247      	movs	r2, #71	; 0x47
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223d      	movs	r2, #61	; 0x3d
 80021aa:	2101      	movs	r1, #1
 80021ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e04a      	b.n	8002260 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	223d      	movs	r2, #61	; 0x3d
 80021ce:	5c9b      	ldrb	r3, [r3, r2]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d107      	bne.n	80021e6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223c      	movs	r2, #60	; 0x3c
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f841 	bl	8002268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	223d      	movs	r2, #61	; 0x3d
 80021ea:	2102      	movs	r1, #2
 80021ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	0019      	movs	r1, r3
 80021f8:	0010      	movs	r0, r2
 80021fa:	f000 faf5 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2248      	movs	r2, #72	; 0x48
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	223e      	movs	r2, #62	; 0x3e
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	2101      	movs	r1, #1
 8002214:	5499      	strb	r1, [r3, r2]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2240      	movs	r2, #64	; 0x40
 800221a:	2101      	movs	r1, #1
 800221c:	5499      	strb	r1, [r3, r2]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2241      	movs	r2, #65	; 0x41
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2242      	movs	r2, #66	; 0x42
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2243      	movs	r2, #67	; 0x43
 8002232:	2101      	movs	r1, #1
 8002234:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2244      	movs	r2, #68	; 0x44
 800223a:	2101      	movs	r1, #1
 800223c:	5499      	strb	r1, [r3, r2]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2245      	movs	r2, #69	; 0x45
 8002242:	2101      	movs	r1, #1
 8002244:	5499      	strb	r1, [r3, r2]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2246      	movs	r2, #70	; 0x46
 800224a:	2101      	movs	r1, #1
 800224c:	5499      	strb	r1, [r3, r2]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2247      	movs	r2, #71	; 0x47
 8002252:	2101      	movs	r1, #1
 8002254:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	223d      	movs	r2, #61	; 0x3d
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002270:	46c0      	nop			; (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b002      	add	sp, #8
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e04a      	b.n	8002320 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	; 0x3d
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	; 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f841 	bl	8002328 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	; 0x3d
 80022aa:	2102      	movs	r1, #2
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 fa95 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2248      	movs	r2, #72	; 0x48
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223e      	movs	r2, #62	; 0x3e
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	; 0x41
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2242      	movs	r2, #66	; 0x42
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2243      	movs	r2, #67	; 0x43
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2244      	movs	r2, #68	; 0x44
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2245      	movs	r2, #69	; 0x45
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2246      	movs	r2, #70	; 0x46
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2247      	movs	r2, #71	; 0x47
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223d      	movs	r2, #61	; 0x3d
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	223c      	movs	r2, #60	; 0x3c
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_TIM_IC_ConfigChannel+0x1a>
 800234e:	2302      	movs	r3, #2
 8002350:	e082      	b.n	8002458 <HAL_TIM_IC_ConfigChannel+0x120>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	223c      	movs	r2, #60	; 0x3c
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	6819      	ldr	r1, [r3, #0]
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	f000 fd74 	bl	8002e5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	210c      	movs	r1, #12
 8002380:	438a      	bics	r2, r1
 8002382:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6999      	ldr	r1, [r3, #24]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	e05a      	b.n	800244e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b04      	cmp	r3, #4
 800239c:	d11c      	bne.n	80023d8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f000 fddb 	bl	8002f68 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4928      	ldr	r1, [pc, #160]	; (8002460 <HAL_TIM_IC_ConfigChannel+0x128>)
 80023be:	400a      	ands	r2, r1
 80023c0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6999      	ldr	r1, [r3, #24]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	021a      	lsls	r2, r3, #8
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	619a      	str	r2, [r3, #24]
 80023d6:	e03a      	b.n	800244e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d11b      	bne.n	8002416 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f000 fe2f 	bl	8003050 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	210c      	movs	r1, #12
 80023fe:	438a      	bics	r2, r1
 8002400:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	61da      	str	r2, [r3, #28]
 8002414:	e01b      	b.n	800244e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	6819      	ldr	r1, [r3, #0]
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f000 fe53 	bl	80030d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	490a      	ldr	r1, [pc, #40]	; (8002460 <HAL_TIM_IC_ConfigChannel+0x128>)
 8002436:	400a      	ands	r2, r1
 8002438:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69d9      	ldr	r1, [r3, #28]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	223c      	movs	r2, #60	; 0x3c
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	fffff3ff 	.word	0xfffff3ff

08002464 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	223c      	movs	r2, #60	; 0x3c
 8002474:	5c9b      	ldrb	r3, [r3, r2]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e0df      	b.n	800263e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	223c      	movs	r2, #60	; 0x3c
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b14      	cmp	r3, #20
 800248a:	d900      	bls.n	800248e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800248c:	e0d1      	b.n	8002632 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	4b6d      	ldr	r3, [pc, #436]	; (8002648 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8002494:	18d3      	adds	r3, r2, r3
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	0011      	movs	r1, r2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fa16 	bl	80028d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2108      	movs	r1, #8
 80024b4:	430a      	orrs	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2104      	movs	r1, #4
 80024c4:	438a      	bics	r2, r1
 80024c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6999      	ldr	r1, [r3, #24]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	619a      	str	r2, [r3, #24]
      break;
 80024da:	e0ab      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	0011      	movs	r1, r2
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 fa7f 	bl	80029e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	0109      	lsls	r1, r1, #4
 80024f8:	430a      	orrs	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4951      	ldr	r1, [pc, #324]	; (800264c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002508:	400a      	ands	r2, r1
 800250a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6999      	ldr	r1, [r3, #24]
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	021a      	lsls	r2, r3, #8
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	619a      	str	r2, [r3, #24]
      break;
 8002520:	e088      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	0011      	movs	r1, r2
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fae0 	bl	8002af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2108      	movs	r1, #8
 800253c:	430a      	orrs	r2, r1
 800253e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2104      	movs	r1, #4
 800254c:	438a      	bics	r2, r1
 800254e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69d9      	ldr	r1, [r3, #28]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	61da      	str	r2, [r3, #28]
      break;
 8002562:	e067      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	0011      	movs	r1, r2
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fb47 	bl	8002c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	0109      	lsls	r1, r1, #4
 8002580:	430a      	orrs	r2, r1
 8002582:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	492f      	ldr	r1, [pc, #188]	; (800264c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002590:	400a      	ands	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69d9      	ldr	r1, [r3, #28]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	61da      	str	r2, [r3, #28]
      break;
 80025a8:	e044      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	0011      	movs	r1, r2
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fb8e 	bl	8002cd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2108      	movs	r1, #8
 80025c4:	430a      	orrs	r2, r1
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2104      	movs	r1, #4
 80025d4:	438a      	bics	r2, r1
 80025d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025ea:	e023      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 fbcd 	bl	8002d94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	0109      	lsls	r1, r1, #4
 8002608:	430a      	orrs	r2, r1
 800260a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	490d      	ldr	r1, [pc, #52]	; (800264c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8002618:	400a      	ands	r2, r1
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	021a      	lsls	r2, r3, #8
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002630:	e000      	b.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8002632:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	223c      	movs	r2, #60	; 0x3c
 8002638:	2100      	movs	r1, #0
 800263a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b004      	add	sp, #16
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	080059c8 	.word	0x080059c8
 800264c:	fffffbff 	.word	0xfffffbff

08002650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223c      	movs	r2, #60	; 0x3c
 800265e:	5c9b      	ldrb	r3, [r3, r2]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_TIM_ConfigClockSource+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e0b7      	b.n	80027d8 <HAL_TIM_ConfigClockSource+0x188>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	223c      	movs	r2, #60	; 0x3c
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	223d      	movs	r2, #61	; 0x3d
 8002674:	2102      	movs	r1, #2
 8002676:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <HAL_TIM_ConfigClockSource+0x190>)
 8002684:	4013      	ands	r3, r2
 8002686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4a56      	ldr	r2, [pc, #344]	; (80027e4 <HAL_TIM_ConfigClockSource+0x194>)
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0192      	lsls	r2, r2, #6
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d040      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0xd6>
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	0192      	lsls	r2, r2, #6
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d900      	bls.n	80026ae <HAL_TIM_ConfigClockSource+0x5e>
 80026ac:	e088      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	0152      	lsls	r2, r2, #5
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d100      	bne.n	80026b8 <HAL_TIM_ConfigClockSource+0x68>
 80026b6:	e085      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x174>
 80026b8:	2280      	movs	r2, #128	; 0x80
 80026ba:	0152      	lsls	r2, r2, #5
 80026bc:	4293      	cmp	r3, r2
 80026be:	d900      	bls.n	80026c2 <HAL_TIM_ConfigClockSource+0x72>
 80026c0:	e07e      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026c2:	2b70      	cmp	r3, #112	; 0x70
 80026c4:	d018      	beq.n	80026f8 <HAL_TIM_ConfigClockSource+0xa8>
 80026c6:	d900      	bls.n	80026ca <HAL_TIM_ConfigClockSource+0x7a>
 80026c8:	e07a      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026ca:	2b60      	cmp	r3, #96	; 0x60
 80026cc:	d04f      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x11e>
 80026ce:	d900      	bls.n	80026d2 <HAL_TIM_ConfigClockSource+0x82>
 80026d0:	e076      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026d2:	2b50      	cmp	r3, #80	; 0x50
 80026d4:	d03b      	beq.n	800274e <HAL_TIM_ConfigClockSource+0xfe>
 80026d6:	d900      	bls.n	80026da <HAL_TIM_ConfigClockSource+0x8a>
 80026d8:	e072      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d057      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x13e>
 80026de:	d900      	bls.n	80026e2 <HAL_TIM_ConfigClockSource+0x92>
 80026e0:	e06e      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026e2:	2b30      	cmp	r3, #48	; 0x30
 80026e4:	d063      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15e>
 80026e6:	d86b      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d060      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15e>
 80026ec:	d868      	bhi.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d05d      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15e>
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d05b      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026f6:	e063      	b.n	80027c0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f000 fd44 	bl	8003194 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2277      	movs	r2, #119	; 0x77
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
      break;
 8002724:	e04f      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	6899      	ldr	r1, [r3, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f000 fd2d 	bl	8003194 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	01c9      	lsls	r1, r1, #7
 8002748:	430a      	orrs	r2, r1
 800274a:	609a      	str	r2, [r3, #8]
      break;
 800274c:	e03b      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	001a      	movs	r2, r3
 800275c:	f000 fbd6 	bl	8002f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2150      	movs	r1, #80	; 0x50
 8002766:	0018      	movs	r0, r3
 8002768:	f000 fcf8 	bl	800315c <TIM_ITRx_SetConfig>
      break;
 800276c:	e02b      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	001a      	movs	r2, r3
 800277c:	f000 fc36 	bl	8002fec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2160      	movs	r1, #96	; 0x60
 8002786:	0018      	movs	r0, r3
 8002788:	f000 fce8 	bl	800315c <TIM_ITRx_SetConfig>
      break;
 800278c:	e01b      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	001a      	movs	r2, r3
 800279c:	f000 fbb6 	bl	8002f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2140      	movs	r1, #64	; 0x40
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 fcd8 	bl	800315c <TIM_ITRx_SetConfig>
      break;
 80027ac:	e00b      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0019      	movs	r1, r3
 80027b8:	0010      	movs	r0, r2
 80027ba:	f000 fccf 	bl	800315c <TIM_ITRx_SetConfig>
        break;
 80027be:	e002      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	e000      	b.n	80027c6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80027c4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	223d      	movs	r2, #61	; 0x3d
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223c      	movs	r2, #60	; 0x3c
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	ffceff88 	.word	0xffceff88
 80027e4:	ffff00ff 	.word	0xffff00ff

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a2f      	ldr	r2, [pc, #188]	; (80028b8 <TIM_Base_SetConfig+0xd0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_Base_SetConfig+0x20>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a2e      	ldr	r2, [pc, #184]	; (80028bc <TIM_Base_SetConfig+0xd4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2270      	movs	r2, #112	; 0x70
 800280c:	4393      	bics	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <TIM_Base_SetConfig+0xd0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_Base_SetConfig+0xd4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00f      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a24      	ldr	r2, [pc, #144]	; (80028c0 <TIM_Base_SetConfig+0xd8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00b      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <TIM_Base_SetConfig+0xdc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <TIM_Base_SetConfig+0xe0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_Base_SetConfig+0x62>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <TIM_Base_SetConfig+0xe4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d108      	bne.n	800285c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <TIM_Base_SetConfig+0xe8>)
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2280      	movs	r2, #128	; 0x80
 8002860:	4393      	bics	r3, r2
 8002862:	001a      	movs	r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a0c      	ldr	r2, [pc, #48]	; (80028b8 <TIM_Base_SetConfig+0xd0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00b      	beq.n	80028a2 <TIM_Base_SetConfig+0xba>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <TIM_Base_SetConfig+0xdc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <TIM_Base_SetConfig+0xba>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <TIM_Base_SetConfig+0xe0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_Base_SetConfig+0xba>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <TIM_Base_SetConfig+0xe4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d103      	bne.n	80028aa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2201      	movs	r2, #1
 80028ae:	615a      	str	r2, [r3, #20]
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40002000 	.word	0x40002000
 80028c4:	40014000 	.word	0x40014000
 80028c8:	40014400 	.word	0x40014400
 80028cc:	40014800 	.word	0x40014800
 80028d0:	fffffcff 	.word	0xfffffcff

080028d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4393      	bics	r3, r2
 80028e6:	001a      	movs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a32      	ldr	r2, [pc, #200]	; (80029cc <TIM_OC1_SetConfig+0xf8>)
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2203      	movs	r2, #3
 800290a:	4393      	bics	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4313      	orrs	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2202      	movs	r2, #2
 800291c:	4393      	bics	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <TIM_OC1_SetConfig+0xfc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00b      	beq.n	800294a <TIM_OC1_SetConfig+0x76>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <TIM_OC1_SetConfig+0x100>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_OC1_SetConfig+0x76>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <TIM_OC1_SetConfig+0x104>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_OC1_SetConfig+0x76>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <TIM_OC1_SetConfig+0x108>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d10c      	bne.n	8002964 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2208      	movs	r2, #8
 800294e:	4393      	bics	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2204      	movs	r2, #4
 8002960:	4393      	bics	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a1a      	ldr	r2, [pc, #104]	; (80029d0 <TIM_OC1_SetConfig+0xfc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d00b      	beq.n	8002984 <TIM_OC1_SetConfig+0xb0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <TIM_OC1_SetConfig+0x100>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <TIM_OC1_SetConfig+0xb0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <TIM_OC1_SetConfig+0x104>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_OC1_SetConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <TIM_OC1_SetConfig+0x108>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d111      	bne.n	80029a8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <TIM_OC1_SetConfig+0x10c>)
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <TIM_OC1_SetConfig+0x110>)
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	621a      	str	r2, [r3, #32]
}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b006      	add	sp, #24
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	fffeff8f 	.word	0xfffeff8f
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	fffffeff 	.word	0xfffffeff
 80029e4:	fffffdff 	.word	0xfffffdff

080029e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	2210      	movs	r2, #16
 80029f8:	4393      	bics	r3, r2
 80029fa:	001a      	movs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a2e      	ldr	r2, [pc, #184]	; (8002ad0 <TIM_OC2_SetConfig+0xe8>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a2d      	ldr	r2, [pc, #180]	; (8002ad4 <TIM_OC2_SetConfig+0xec>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2220      	movs	r2, #32
 8002a32:	4393      	bics	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a24      	ldr	r2, [pc, #144]	; (8002ad8 <TIM_OC2_SetConfig+0xf0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10d      	bne.n	8002a66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	4393      	bics	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	4393      	bics	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a1b      	ldr	r2, [pc, #108]	; (8002ad8 <TIM_OC2_SetConfig+0xf0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00b      	beq.n	8002a86 <TIM_OC2_SetConfig+0x9e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <TIM_OC2_SetConfig+0xf4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <TIM_OC2_SetConfig+0x9e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a19      	ldr	r2, [pc, #100]	; (8002ae0 <TIM_OC2_SetConfig+0xf8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d003      	beq.n	8002a86 <TIM_OC2_SetConfig+0x9e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a18      	ldr	r2, [pc, #96]	; (8002ae4 <TIM_OC2_SetConfig+0xfc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d113      	bne.n	8002aae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <TIM_OC2_SetConfig+0x100>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	4a16      	ldr	r2, [pc, #88]	; (8002aec <TIM_OC2_SetConfig+0x104>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	621a      	str	r2, [r3, #32]
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	feff8fff 	.word	0xfeff8fff
 8002ad4:	fffffcff 	.word	0xfffffcff
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40014400 	.word	0x40014400
 8002ae4:	40014800 	.word	0x40014800
 8002ae8:	fffffbff 	.word	0xfffffbff
 8002aec:	fffff7ff 	.word	0xfffff7ff

08002af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4a35      	ldr	r2, [pc, #212]	; (8002bd4 <TIM_OC3_SetConfig+0xe4>)
 8002b00:	401a      	ands	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <TIM_OC3_SetConfig+0xe8>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2203      	movs	r2, #3
 8002b24:	4393      	bics	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <TIM_OC3_SetConfig+0xec>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	021b      	lsls	r3, r3, #8
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <TIM_OC3_SetConfig+0xf0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d10d      	bne.n	8002b6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <TIM_OC3_SetConfig+0xf4>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	4a20      	ldr	r2, [pc, #128]	; (8002be8 <TIM_OC3_SetConfig+0xf8>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <TIM_OC3_SetConfig+0xf0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <TIM_OC3_SetConfig+0x9a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <TIM_OC3_SetConfig+0xfc>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <TIM_OC3_SetConfig+0x9a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <TIM_OC3_SetConfig+0x100>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_OC3_SetConfig+0x9a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <TIM_OC3_SetConfig+0x104>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d113      	bne.n	8002bb2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	; (8002bf8 <TIM_OC3_SetConfig+0x108>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <TIM_OC3_SetConfig+0x10c>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	621a      	str	r2, [r3, #32]
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b006      	add	sp, #24
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	fffffeff 	.word	0xfffffeff
 8002bd8:	fffeff8f 	.word	0xfffeff8f
 8002bdc:	fffffdff 	.word	0xfffffdff
 8002be0:	40012c00 	.word	0x40012c00
 8002be4:	fffff7ff 	.word	0xfffff7ff
 8002be8:	fffffbff 	.word	0xfffffbff
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40014400 	.word	0x40014400
 8002bf4:	40014800 	.word	0x40014800
 8002bf8:	ffffefff 	.word	0xffffefff
 8002bfc:	ffffdfff 	.word	0xffffdfff

08002c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4a28      	ldr	r2, [pc, #160]	; (8002cb0 <TIM_OC4_SetConfig+0xb0>)
 8002c10:	401a      	ands	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <TIM_OC4_SetConfig+0xb4>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <TIM_OC4_SetConfig+0xb8>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <TIM_OC4_SetConfig+0xbc>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	031b      	lsls	r3, r3, #12
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <TIM_OC4_SetConfig+0xc0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <TIM_OC4_SetConfig+0x78>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <TIM_OC4_SetConfig+0xc4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_OC4_SetConfig+0x78>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <TIM_OC4_SetConfig+0xc8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC4_SetConfig+0x78>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <TIM_OC4_SetConfig+0xcc>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d109      	bne.n	8002c8c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <TIM_OC4_SetConfig+0xd0>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b006      	add	sp, #24
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	ffffefff 	.word	0xffffefff
 8002cb4:	feff8fff 	.word	0xfeff8fff
 8002cb8:	fffffcff 	.word	0xfffffcff
 8002cbc:	ffffdfff 	.word	0xffffdfff
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400
 8002ccc:	40014800 	.word	0x40014800
 8002cd0:	ffffbfff 	.word	0xffffbfff

08002cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <TIM_OC5_SetConfig+0xa4>)
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <TIM_OC5_SetConfig+0xa8>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <TIM_OC5_SetConfig+0xac>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <TIM_OC5_SetConfig+0xb0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_OC5_SetConfig+0x6e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <TIM_OC5_SetConfig+0xb4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <TIM_OC5_SetConfig+0x6e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <TIM_OC5_SetConfig+0xb8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_OC5_SetConfig+0x6e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <TIM_OC5_SetConfig+0xbc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d109      	bne.n	8002d56 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <TIM_OC5_SetConfig+0xa4>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	021b      	lsls	r3, r3, #8
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b006      	add	sp, #24
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	fffeffff 	.word	0xfffeffff
 8002d7c:	fffeff8f 	.word	0xfffeff8f
 8002d80:	fffdffff 	.word	0xfffdffff
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800

08002d94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <TIM_OC6_SetConfig+0xa8>)
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <TIM_OC6_SetConfig+0xac>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <TIM_OC6_SetConfig+0xb0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	051b      	lsls	r3, r3, #20
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <TIM_OC6_SetConfig+0xb4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_OC6_SetConfig+0x70>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a17      	ldr	r2, [pc, #92]	; (8002e4c <TIM_OC6_SetConfig+0xb8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_OC6_SetConfig+0x70>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a16      	ldr	r2, [pc, #88]	; (8002e50 <TIM_OC6_SetConfig+0xbc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_OC6_SetConfig+0x70>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <TIM_OC6_SetConfig+0xc0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d109      	bne.n	8002e18 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <TIM_OC6_SetConfig+0xc4>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	029b      	lsls	r3, r3, #10
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b006      	add	sp, #24
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	ffefffff 	.word	0xffefffff
 8002e40:	feff8fff 	.word	0xfeff8fff
 8002e44:	ffdfffff 	.word	0xffdfffff
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800
 8002e58:	fffbffff 	.word	0xfffbffff

08002e5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4393      	bics	r3, r2
 8002e72:	001a      	movs	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a1e      	ldr	r2, [pc, #120]	; (8002f00 <TIM_TI1_SetConfig+0xa4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d007      	beq.n	8002e9c <TIM_TI1_SetConfig+0x40>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <TIM_TI1_SetConfig+0xa8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d003      	beq.n	8002e9c <TIM_TI1_SetConfig+0x40>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <TIM_TI1_SetConfig+0xac>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <TIM_TI1_SetConfig+0x44>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <TIM_TI1_SetConfig+0x46>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	4393      	bics	r3, r2
 8002eac:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e003      	b.n	8002ec0 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	22f0      	movs	r2, #240	; 0xf0
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	4013      	ands	r3, r2
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	220a      	movs	r2, #10
 8002eda:	4393      	bics	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	220a      	movs	r2, #10
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b006      	add	sp, #24
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40014000 	.word	0x40014000

08002f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4393      	bics	r3, r2
 8002f26:	001a      	movs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	22f0      	movs	r2, #240	; 0xf0
 8002f36:	4393      	bics	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	220a      	movs	r2, #10
 8002f48:	4393      	bics	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	621a      	str	r2, [r3, #32]
}
 8002f60:	46c0      	nop			; (mov r8, r8)
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b006      	add	sp, #24
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	001a      	movs	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_TI2_SetConfig+0x7c>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <TIM_TI2_SetConfig+0x80>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	031b      	lsls	r3, r3, #12
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	0c1b      	lsrs	r3, r3, #16
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	22a0      	movs	r2, #160	; 0xa0
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	22a0      	movs	r2, #160	; 0xa0
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b006      	add	sp, #24
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	fffffcff 	.word	0xfffffcff
 8002fe8:	ffff0fff 	.word	0xffff0fff

08002fec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	2210      	movs	r2, #16
 8002ffe:	4393      	bics	r3, r2
 8003000:	001a      	movs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <TIM_TI2_ConfigInputStage+0x60>)
 8003016:	4013      	ands	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	031b      	lsls	r3, r3, #12
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	22a0      	movs	r2, #160	; 0xa0
 8003028:	4393      	bics	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b006      	add	sp, #24
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	ffff0fff 	.word	0xffff0fff

08003050 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <TIM_TI3_SetConfig+0x78>)
 8003064:	401a      	ands	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2203      	movs	r2, #3
 800307a:	4393      	bics	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	22f0      	movs	r2, #240	; 0xf0
 800308a:	4393      	bics	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	22ff      	movs	r2, #255	; 0xff
 8003094:	4013      	ands	r3, r2
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4a0b      	ldr	r2, [pc, #44]	; (80030cc <TIM_TI3_SetConfig+0x7c>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	021a      	lsls	r2, r3, #8
 80030a8:	23a0      	movs	r3, #160	; 0xa0
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4013      	ands	r3, r2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	621a      	str	r2, [r3, #32]
}
 80030c0:	46c0      	nop			; (mov r8, r8)
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b006      	add	sp, #24
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	fffffeff 	.word	0xfffffeff
 80030cc:	fffff5ff 	.word	0xfffff5ff

080030d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a1a      	ldr	r2, [pc, #104]	; (800314c <TIM_TI4_SetConfig+0x7c>)
 80030e4:	401a      	ands	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4a15      	ldr	r2, [pc, #84]	; (8003150 <TIM_TI4_SetConfig+0x80>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <TIM_TI4_SetConfig+0x84>)
 800310c:	4013      	ands	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	031b      	lsls	r3, r3, #12
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <TIM_TI4_SetConfig+0x88>)
 8003122:	4013      	ands	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	031a      	lsls	r2, r3, #12
 800312a:	23a0      	movs	r3, #160	; 0xa0
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	4013      	ands	r3, r2
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b006      	add	sp, #24
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	ffffefff 	.word	0xffffefff
 8003150:	fffffcff 	.word	0xfffffcff
 8003154:	ffff0fff 	.word	0xffff0fff
 8003158:	ffff5fff 	.word	0xffff5fff

0800315c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <TIM_ITRx_SetConfig+0x34>)
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	2207      	movs	r2, #7
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	609a      	str	r2, [r3, #8]
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b004      	add	sp, #16
 800318c:	bd80      	pop	{r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	ffcfff8f 	.word	0xffcfff8f

08003194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <TIM_ETR_SetConfig+0x3c>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	021a      	lsls	r2, r3, #8
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b006      	add	sp, #24
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	ffff00ff 	.word	0xffff00ff

080031d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	223c      	movs	r2, #60	; 0x3c
 80031e2:	5c9b      	ldrb	r3, [r3, r2]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e04f      	b.n	800328c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	223c      	movs	r2, #60	; 0x3c
 80031f0:	2101      	movs	r1, #1
 80031f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	223d      	movs	r2, #61	; 0x3d
 80031f8:	2102      	movs	r1, #2
 80031fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4313      	orrs	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2270      	movs	r2, #112	; 0x70
 800322c:	4393      	bics	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d009      	beq.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10c      	bne.n	800327a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	4393      	bics	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4313      	orrs	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	223d      	movs	r2, #61	; 0x3d
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223c      	movs	r2, #60	; 0x3c
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b004      	add	sp, #16
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	ff0fffff 	.word	0xff0fffff
 800329c:	40000400 	.word	0x40000400
 80032a0:	40014000 	.word	0x40014000

080032a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e046      	b.n	8003344 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2284      	movs	r2, #132	; 0x84
 80032ba:	589b      	ldr	r3, [r3, r2]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	2100      	movs	r1, #0
 80032c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7fd fc9e 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2284      	movs	r2, #132	; 0x84
 80032d4:	2124      	movs	r1, #36	; 0x24
 80032d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2101      	movs	r1, #1
 80032e4:	438a      	bics	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f958 	bl	80035a0 <UART_SetConfig>
 80032f0:	0003      	movs	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e024      	b.n	8003344 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0018      	movs	r0, r3
 8003306:	f000 faf1 	bl	80038ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	490d      	ldr	r1, [pc, #52]	; (800334c <HAL_UART_Init+0xa8>)
 8003316:	400a      	ands	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	212a      	movs	r1, #42	; 0x2a
 8003326:	438a      	bics	r2, r1
 8003328:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fb89 	bl	8003a54 <UART_CheckIdleState>
 8003342:	0003      	movs	r3, r0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b002      	add	sp, #8
 800334a:	bd80      	pop	{r7, pc}
 800334c:	ffffb7ff 	.word	0xffffb7ff

08003350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2284      	movs	r2, #132	; 0x84
 8003364:	589b      	ldr	r3, [r3, r2]
 8003366:	2b20      	cmp	r3, #32
 8003368:	d000      	beq.n	800336c <HAL_UART_Transmit+0x1c>
 800336a:	e097      	b.n	800349c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_UART_Transmit+0x2a>
 8003372:	1dbb      	adds	r3, r7, #6
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e08f      	b.n	800349e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	015b      	lsls	r3, r3, #5
 8003386:	429a      	cmp	r2, r3
 8003388:	d109      	bne.n	800339e <HAL_UART_Transmit+0x4e>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2201      	movs	r2, #1
 8003396:	4013      	ands	r3, r2
 8003398:	d001      	beq.n	800339e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e07f      	b.n	800349e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_UART_Transmit+0x5c>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e078      	b.n	800349e <HAL_UART_Transmit+0x14e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	2101      	movs	r1, #1
 80033b2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	228c      	movs	r2, #140	; 0x8c
 80033b8:	2100      	movs	r1, #0
 80033ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2284      	movs	r2, #132	; 0x84
 80033c0:	2121      	movs	r1, #33	; 0x21
 80033c2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033c4:	f7fd fdcc 	bl	8000f60 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1dba      	adds	r2, r7, #6
 80033d0:	2154      	movs	r1, #84	; 0x54
 80033d2:	8812      	ldrh	r2, [r2, #0]
 80033d4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1dba      	adds	r2, r7, #6
 80033da:	2156      	movs	r1, #86	; 0x56
 80033dc:	8812      	ldrh	r2, [r2, #0]
 80033de:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	015b      	lsls	r3, r3, #5
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d108      	bne.n	80033fe <HAL_UART_Transmit+0xae>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e003      	b.n	8003406 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800340e:	e02c      	b.n	800346a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	0013      	movs	r3, r2
 800341a:	2200      	movs	r2, #0
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	f000 fb63 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003422:	1e03      	subs	r3, r0, #0
 8003424:	d001      	beq.n	800342a <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e039      	b.n	800349e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	001a      	movs	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	05d2      	lsls	r2, r2, #23
 800343c:	0dd2      	lsrs	r2, r2, #23
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	3302      	adds	r3, #2
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e007      	b.n	8003458 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	781a      	ldrb	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3301      	adds	r3, #1
 8003456:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2256      	movs	r2, #86	; 0x56
 800345c:	5a9b      	ldrh	r3, [r3, r2]
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b299      	uxth	r1, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2256      	movs	r2, #86	; 0x56
 8003468:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2256      	movs	r2, #86	; 0x56
 800346e:	5a9b      	ldrh	r3, [r3, r2]
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1cc      	bne.n	8003410 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	0013      	movs	r3, r2
 8003480:	2200      	movs	r2, #0
 8003482:	2140      	movs	r1, #64	; 0x40
 8003484:	f000 fb30 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e006      	b.n	800349e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2284      	movs	r2, #132	; 0x84
 8003494:	2120      	movs	r1, #32
 8003496:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	e000      	b.n	800349e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800349c:	2302      	movs	r3, #2
  }
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b008      	add	sp, #32
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b088      	sub	sp, #32
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	1dbb      	adds	r3, r7, #6
 80034b2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2288      	movs	r2, #136	; 0x88
 80034b8:	589b      	ldr	r3, [r3, r2]
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d150      	bne.n	8003560 <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_UART_Receive_IT+0x26>
 80034c4:	1dbb      	adds	r3, r7, #6
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e048      	b.n	8003562 <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	015b      	lsls	r3, r3, #5
 80034d8:	429a      	cmp	r2, r3
 80034da:	d109      	bne.n	80034f0 <HAL_UART_Receive_IT+0x4a>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d105      	bne.n	80034f0 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2201      	movs	r2, #1
 80034e8:	4013      	ands	r3, r2
 80034ea:	d001      	beq.n	80034f0 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e038      	b.n	8003562 <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Receive_IT+0x58>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e031      	b.n	8003562 <HAL_UART_Receive_IT+0xbc>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	2101      	movs	r1, #1
 8003504:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	2380      	movs	r3, #128	; 0x80
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	4013      	ands	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_UART_Receive_IT+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351a:	f3ef 8310 	mrs	r3, PRIMASK
 800351e:	613b      	str	r3, [r7, #16]
  return(result);
 8003520:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003522:	61fb      	str	r3, [r7, #28]
 8003524:	2301      	movs	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f383 8810 	msr	PRIMASK, r3
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	04c9      	lsls	r1, r1, #19
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	f383 8810 	msr	PRIMASK, r3
}
 800354c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800354e:	1dbb      	adds	r3, r7, #6
 8003550:	881a      	ldrh	r2, [r3, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 fb8e 	bl	8003c78 <UART_Start_Receive_IT>
 800355c:	0003      	movs	r3, r0
 800355e:	e000      	b.n	8003562 <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b008      	add	sp, #32
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b002      	add	sp, #8
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	b002      	add	sp, #8
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	000a      	movs	r2, r1
 8003594:	1cbb      	adds	r3, r7, #2
 8003596:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}

080035a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a8:	231a      	movs	r3, #26
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4abd      	ldr	r2, [pc, #756]	; (80038c4 <UART_SetConfig+0x324>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	0019      	movs	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4ab8      	ldr	r2, [pc, #736]	; (80038c8 <UART_SetConfig+0x328>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	4313      	orrs	r3, r2
 8003604:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4aaf      	ldr	r2, [pc, #700]	; (80038cc <UART_SetConfig+0x32c>)
 800360e:	4013      	ands	r3, r2
 8003610:	0019      	movs	r1, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	430a      	orrs	r2, r1
 800361a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	220f      	movs	r2, #15
 8003624:	4393      	bics	r3, r2
 8003626:	0019      	movs	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4aa5      	ldr	r2, [pc, #660]	; (80038d0 <UART_SetConfig+0x330>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d127      	bne.n	800368e <UART_SetConfig+0xee>
 800363e:	4ba5      	ldr	r3, [pc, #660]	; (80038d4 <UART_SetConfig+0x334>)
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	2203      	movs	r2, #3
 8003644:	4013      	ands	r3, r2
 8003646:	2b03      	cmp	r3, #3
 8003648:	d017      	beq.n	800367a <UART_SetConfig+0xda>
 800364a:	d81b      	bhi.n	8003684 <UART_SetConfig+0xe4>
 800364c:	2b02      	cmp	r3, #2
 800364e:	d00a      	beq.n	8003666 <UART_SetConfig+0xc6>
 8003650:	d818      	bhi.n	8003684 <UART_SetConfig+0xe4>
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <UART_SetConfig+0xbc>
 8003656:	2b01      	cmp	r3, #1
 8003658:	d00a      	beq.n	8003670 <UART_SetConfig+0xd0>
 800365a:	e013      	b.n	8003684 <UART_SetConfig+0xe4>
 800365c:	231b      	movs	r3, #27
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
 8003664:	e058      	b.n	8003718 <UART_SetConfig+0x178>
 8003666:	231b      	movs	r3, #27
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	2202      	movs	r2, #2
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e053      	b.n	8003718 <UART_SetConfig+0x178>
 8003670:	231b      	movs	r3, #27
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	2204      	movs	r2, #4
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e04e      	b.n	8003718 <UART_SetConfig+0x178>
 800367a:	231b      	movs	r3, #27
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2208      	movs	r2, #8
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e049      	b.n	8003718 <UART_SetConfig+0x178>
 8003684:	231b      	movs	r3, #27
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2210      	movs	r2, #16
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e044      	b.n	8003718 <UART_SetConfig+0x178>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a91      	ldr	r2, [pc, #580]	; (80038d8 <UART_SetConfig+0x338>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d127      	bne.n	80036e8 <UART_SetConfig+0x148>
 8003698:	4b8e      	ldr	r3, [pc, #568]	; (80038d4 <UART_SetConfig+0x334>)
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	220c      	movs	r2, #12
 800369e:	4013      	ands	r3, r2
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d017      	beq.n	80036d4 <UART_SetConfig+0x134>
 80036a4:	d81b      	bhi.n	80036de <UART_SetConfig+0x13e>
 80036a6:	2b08      	cmp	r3, #8
 80036a8:	d00a      	beq.n	80036c0 <UART_SetConfig+0x120>
 80036aa:	d818      	bhi.n	80036de <UART_SetConfig+0x13e>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <UART_SetConfig+0x116>
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d00a      	beq.n	80036ca <UART_SetConfig+0x12a>
 80036b4:	e013      	b.n	80036de <UART_SetConfig+0x13e>
 80036b6:	231b      	movs	r3, #27
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e02b      	b.n	8003718 <UART_SetConfig+0x178>
 80036c0:	231b      	movs	r3, #27
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2202      	movs	r2, #2
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e026      	b.n	8003718 <UART_SetConfig+0x178>
 80036ca:	231b      	movs	r3, #27
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2204      	movs	r2, #4
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e021      	b.n	8003718 <UART_SetConfig+0x178>
 80036d4:	231b      	movs	r3, #27
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2208      	movs	r2, #8
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e01c      	b.n	8003718 <UART_SetConfig+0x178>
 80036de:	231b      	movs	r3, #27
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2210      	movs	r2, #16
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e017      	b.n	8003718 <UART_SetConfig+0x178>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7b      	ldr	r2, [pc, #492]	; (80038dc <UART_SetConfig+0x33c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d104      	bne.n	80036fc <UART_SetConfig+0x15c>
 80036f2:	231b      	movs	r3, #27
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e00d      	b.n	8003718 <UART_SetConfig+0x178>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <UART_SetConfig+0x340>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d104      	bne.n	8003710 <UART_SetConfig+0x170>
 8003706:	231b      	movs	r3, #27
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e003      	b.n	8003718 <UART_SetConfig+0x178>
 8003710:	231b      	movs	r3, #27
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2210      	movs	r2, #16
 8003716:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	429a      	cmp	r2, r3
 8003722:	d000      	beq.n	8003726 <UART_SetConfig+0x186>
 8003724:	e066      	b.n	80037f4 <UART_SetConfig+0x254>
  {
    switch (clocksource)
 8003726:	231b      	movs	r3, #27
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d015      	beq.n	800375c <UART_SetConfig+0x1bc>
 8003730:	dc18      	bgt.n	8003764 <UART_SetConfig+0x1c4>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d00d      	beq.n	8003752 <UART_SetConfig+0x1b2>
 8003736:	dc15      	bgt.n	8003764 <UART_SetConfig+0x1c4>
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <UART_SetConfig+0x1a2>
 800373c:	2b02      	cmp	r3, #2
 800373e:	d005      	beq.n	800374c <UART_SetConfig+0x1ac>
 8003740:	e010      	b.n	8003764 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003742:	f7fe fb97 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003746:	0003      	movs	r3, r0
 8003748:	617b      	str	r3, [r7, #20]
        break;
 800374a:	e012      	b.n	8003772 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800374c:	4b65      	ldr	r3, [pc, #404]	; (80038e4 <UART_SetConfig+0x344>)
 800374e:	617b      	str	r3, [r7, #20]
        break;
 8003750:	e00f      	b.n	8003772 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003752:	f7fe fb03 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8003756:	0003      	movs	r3, r0
 8003758:	617b      	str	r3, [r7, #20]
        break;
 800375a:	e00a      	b.n	8003772 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	617b      	str	r3, [r7, #20]
        break;
 8003762:	e006      	b.n	8003772 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003768:	231a      	movs	r3, #26
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
        break;
 8003770:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d100      	bne.n	800377a <UART_SetConfig+0x1da>
 8003778:	e08e      	b.n	8003898 <UART_SetConfig+0x2f8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <UART_SetConfig+0x348>)
 8003780:	0052      	lsls	r2, r2, #1
 8003782:	5ad3      	ldrh	r3, [r2, r3]
 8003784:	0019      	movs	r1, r3
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7fc fcc4 	bl	8000114 <__udivsi3>
 800378c:	0003      	movs	r3, r0
 800378e:	005a      	lsls	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	18d2      	adds	r2, r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	0019      	movs	r1, r3
 800379e:	0010      	movs	r0, r2
 80037a0:	f7fc fcb8 	bl	8000114 <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d91c      	bls.n	80037ea <UART_SetConfig+0x24a>
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	025b      	lsls	r3, r3, #9
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d217      	bcs.n	80037ea <UART_SetConfig+0x24a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	b29a      	uxth	r2, r3
 80037be:	200e      	movs	r0, #14
 80037c0:	183b      	adds	r3, r7, r0
 80037c2:	210f      	movs	r1, #15
 80037c4:	438a      	bics	r2, r1
 80037c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2207      	movs	r2, #7
 80037d0:	4013      	ands	r3, r2
 80037d2:	b299      	uxth	r1, r3
 80037d4:	183b      	adds	r3, r7, r0
 80037d6:	183a      	adds	r2, r7, r0
 80037d8:	8812      	ldrh	r2, [r2, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	183a      	adds	r2, r7, r0
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	60da      	str	r2, [r3, #12]
 80037e8:	e056      	b.n	8003898 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037ea:	231a      	movs	r3, #26
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e051      	b.n	8003898 <UART_SetConfig+0x2f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f4:	231b      	movs	r3, #27
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d015      	beq.n	800382a <UART_SetConfig+0x28a>
 80037fe:	dc18      	bgt.n	8003832 <UART_SetConfig+0x292>
 8003800:	2b04      	cmp	r3, #4
 8003802:	d00d      	beq.n	8003820 <UART_SetConfig+0x280>
 8003804:	dc15      	bgt.n	8003832 <UART_SetConfig+0x292>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <UART_SetConfig+0x270>
 800380a:	2b02      	cmp	r3, #2
 800380c:	d005      	beq.n	800381a <UART_SetConfig+0x27a>
 800380e:	e010      	b.n	8003832 <UART_SetConfig+0x292>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7fe fb30 	bl	8001e74 <HAL_RCC_GetPCLK1Freq>
 8003814:	0003      	movs	r3, r0
 8003816:	617b      	str	r3, [r7, #20]
        break;
 8003818:	e012      	b.n	8003840 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <UART_SetConfig+0x344>)
 800381c:	617b      	str	r3, [r7, #20]
        break;
 800381e:	e00f      	b.n	8003840 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003820:	f7fe fa9c 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8003824:	0003      	movs	r3, r0
 8003826:	617b      	str	r3, [r7, #20]
        break;
 8003828:	e00a      	b.n	8003840 <UART_SetConfig+0x2a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	617b      	str	r3, [r7, #20]
        break;
 8003830:	e006      	b.n	8003840 <UART_SetConfig+0x2a0>
      default:
        pclk = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003836:	231a      	movs	r3, #26
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
        break;
 800383e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d028      	beq.n	8003898 <UART_SetConfig+0x2f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <UART_SetConfig+0x348>)
 800384c:	0052      	lsls	r2, r2, #1
 800384e:	5ad3      	ldrh	r3, [r2, r3]
 8003850:	0019      	movs	r1, r3
 8003852:	6978      	ldr	r0, [r7, #20]
 8003854:	f7fc fc5e 	bl	8000114 <__udivsi3>
 8003858:	0003      	movs	r3, r0
 800385a:	001a      	movs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	085b      	lsrs	r3, r3, #1
 8003862:	18d2      	adds	r2, r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0019      	movs	r1, r3
 800386a:	0010      	movs	r0, r2
 800386c:	f7fc fc52 	bl	8000114 <__udivsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	b29b      	uxth	r3, r3
 8003874:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d909      	bls.n	8003890 <UART_SetConfig+0x2f0>
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	025b      	lsls	r3, r3, #9
 8003882:	429a      	cmp	r2, r3
 8003884:	d204      	bcs.n	8003890 <UART_SetConfig+0x2f0>
      {
        huart->Instance->BRR = usartdiv;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	e003      	b.n	8003898 <UART_SetConfig+0x2f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003890:	231a      	movs	r3, #26
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	226a      	movs	r2, #106	; 0x6a
 800389c:	2101      	movs	r1, #1
 800389e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2268      	movs	r2, #104	; 0x68
 80038a4:	2101      	movs	r1, #1
 80038a6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80038b4:	231a      	movs	r3, #26
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b008      	add	sp, #32
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	cfff69f3 	.word	0xcfff69f3
 80038c8:	ffffcfff 	.word	0xffffcfff
 80038cc:	11fff4ff 	.word	0x11fff4ff
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40004400 	.word	0x40004400
 80038dc:	40004800 	.word	0x40004800
 80038e0:	40004c00 	.word	0x40004c00
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	08005a1c 	.word	0x08005a1c

080038ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	2201      	movs	r2, #1
 80038fa:	4013      	ands	r3, r2
 80038fc:	d00b      	beq.n	8003916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a4a      	ldr	r2, [pc, #296]	; (8003a30 <UART_AdvFeatureConfig+0x144>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	d00b      	beq.n	8003938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4a43      	ldr	r2, [pc, #268]	; (8003a34 <UART_AdvFeatureConfig+0x148>)
 8003928:	4013      	ands	r3, r2
 800392a:	0019      	movs	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	2204      	movs	r2, #4
 800393e:	4013      	ands	r3, r2
 8003940:	d00b      	beq.n	800395a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a3b      	ldr	r2, [pc, #236]	; (8003a38 <UART_AdvFeatureConfig+0x14c>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	2208      	movs	r2, #8
 8003960:	4013      	ands	r3, r2
 8003962:	d00b      	beq.n	800397c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <UART_AdvFeatureConfig+0x150>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	2210      	movs	r2, #16
 8003982:	4013      	ands	r3, r2
 8003984:	d00b      	beq.n	800399e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4a2c      	ldr	r2, [pc, #176]	; (8003a40 <UART_AdvFeatureConfig+0x154>)
 800398e:	4013      	ands	r3, r2
 8003990:	0019      	movs	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	2220      	movs	r2, #32
 80039a4:	4013      	ands	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <UART_AdvFeatureConfig+0x158>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	0019      	movs	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	4013      	ands	r3, r2
 80039c8:	d01d      	beq.n	8003a06 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <UART_AdvFeatureConfig+0x15c>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	0019      	movs	r1, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	430a      	orrs	r2, r1
 80039e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	035b      	lsls	r3, r3, #13
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d10b      	bne.n	8003a06 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <UART_AdvFeatureConfig+0x160>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	0019      	movs	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a0e      	ldr	r2, [pc, #56]	; (8003a50 <UART_AdvFeatureConfig+0x164>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	0019      	movs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  }
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fffdffff 	.word	0xfffdffff
 8003a34:	fffeffff 	.word	0xfffeffff
 8003a38:	fffbffff 	.word	0xfffbffff
 8003a3c:	ffff7fff 	.word	0xffff7fff
 8003a40:	ffffefff 	.word	0xffffefff
 8003a44:	ffffdfff 	.word	0xffffdfff
 8003a48:	ffefffff 	.word	0xffefffff
 8003a4c:	ff9fffff 	.word	0xff9fffff
 8003a50:	fff7ffff 	.word	0xfff7ffff

08003a54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	228c      	movs	r2, #140	; 0x8c
 8003a60:	2100      	movs	r1, #0
 8003a62:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a64:	f7fd fa7c 	bl	8000f60 <HAL_GetTick>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2208      	movs	r2, #8
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d10c      	bne.n	8003a94 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2280      	movs	r2, #128	; 0x80
 8003a7e:	0391      	lsls	r1, r2, #14
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <UART_CheckIdleState+0x90>)
 8003a84:	9200      	str	r2, [sp, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f000 f82e 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003a8c:	1e03      	subs	r3, r0, #0
 8003a8e:	d001      	beq.n	8003a94 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e023      	b.n	8003adc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d10c      	bne.n	8003abc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2280      	movs	r2, #128	; 0x80
 8003aa6:	03d1      	lsls	r1, r2, #15
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <UART_CheckIdleState+0x90>)
 8003aac:	9200      	str	r2, [sp, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f000 f81a 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003ab4:	1e03      	subs	r3, r0, #0
 8003ab6:	d001      	beq.n	8003abc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e00f      	b.n	8003adc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2284      	movs	r2, #132	; 0x84
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2288      	movs	r2, #136	; 0x88
 8003ac8:	2120      	movs	r1, #32
 8003aca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2280      	movs	r2, #128	; 0x80
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	0018      	movs	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b004      	add	sp, #16
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	01ffffff 	.word	0x01ffffff

08003ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b094      	sub	sp, #80	; 0x50
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	1dfb      	adds	r3, r7, #7
 8003af6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	e0a7      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003afc:	3301      	adds	r3, #1
 8003afe:	d100      	bne.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b00:	e0a3      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fd fa2d 	bl	8000f60 <HAL_GetTick>
 8003b06:	0002      	movs	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d13f      	bne.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b18:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b20:	647b      	str	r3, [r7, #68]	; 0x44
 8003b22:	2301      	movs	r3, #1
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	494e      	ldr	r1, [pc, #312]	; (8003c74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	643b      	str	r3, [r7, #64]	; 0x40
 8003b54:	2301      	movs	r3, #1
 8003b56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	f383 8810 	msr	PRIMASK, r3
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	438a      	bics	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b76:	f383 8810 	msr	PRIMASK, r3
}
 8003b7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2284      	movs	r2, #132	; 0x84
 8003b80:	2120      	movs	r1, #32
 8003b82:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2288      	movs	r2, #136	; 0x88
 8003b88:	2120      	movs	r1, #32
 8003b8a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2280      	movs	r2, #128	; 0x80
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e069      	b.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d052      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	401a      	ands	r2, r3
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d148      	bne.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	613b      	str	r3, [r7, #16]
  return(result);
 8003bc8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4924      	ldr	r1, [pc, #144]	; (8003c74 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfe:	2301      	movs	r3, #1
 8003c00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	438a      	bics	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2284      	movs	r2, #132	; 0x84
 8003c2a:	2120      	movs	r1, #32
 8003c2c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2288      	movs	r2, #136	; 0x88
 8003c32:	2120      	movs	r1, #32
 8003c34:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	228c      	movs	r2, #140	; 0x8c
 8003c3a:	2120      	movs	r1, #32
 8003c3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2280      	movs	r2, #128	; 0x80
 8003c42:	2100      	movs	r1, #0
 8003c44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e010      	b.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	425a      	negs	r2, r3
 8003c5a:	4153      	adcs	r3, r2
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	001a      	movs	r2, r3
 8003c60:	1dfb      	adds	r3, r7, #7
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d100      	bne.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x182>
 8003c68:	e747      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b014      	add	sp, #80	; 0x50
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	fffffe5f 	.word	0xfffffe5f

08003c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b094      	sub	sp, #80	; 0x50
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	1dbb      	adds	r3, r7, #6
 8003c84:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1dba      	adds	r2, r7, #6
 8003c90:	215c      	movs	r1, #92	; 0x5c
 8003c92:	8812      	ldrh	r2, [r2, #0]
 8003c94:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1dba      	adds	r2, r7, #6
 8003c9a:	215e      	movs	r1, #94	; 0x5e
 8003c9c:	8812      	ldrh	r2, [r2, #0]
 8003c9e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	015b      	lsls	r3, r3, #5
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d10d      	bne.n	8003cce <UART_Start_Receive_IT+0x56>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <UART_Start_Receive_IT+0x4c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2260      	movs	r2, #96	; 0x60
 8003cbe:	496f      	ldr	r1, [pc, #444]	; (8003e7c <UART_Start_Receive_IT+0x204>)
 8003cc0:	5299      	strh	r1, [r3, r2]
 8003cc2:	e02e      	b.n	8003d22 <UART_Start_Receive_IT+0xaa>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2260      	movs	r2, #96	; 0x60
 8003cc8:	21ff      	movs	r1, #255	; 0xff
 8003cca:	5299      	strh	r1, [r3, r2]
 8003ccc:	e029      	b.n	8003d22 <UART_Start_Receive_IT+0xaa>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10d      	bne.n	8003cf2 <UART_Start_Receive_IT+0x7a>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d104      	bne.n	8003ce8 <UART_Start_Receive_IT+0x70>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2260      	movs	r2, #96	; 0x60
 8003ce2:	21ff      	movs	r1, #255	; 0xff
 8003ce4:	5299      	strh	r1, [r3, r2]
 8003ce6:	e01c      	b.n	8003d22 <UART_Start_Receive_IT+0xaa>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2260      	movs	r2, #96	; 0x60
 8003cec:	217f      	movs	r1, #127	; 0x7f
 8003cee:	5299      	strh	r1, [r3, r2]
 8003cf0:	e017      	b.n	8003d22 <UART_Start_Receive_IT+0xaa>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	055b      	lsls	r3, r3, #21
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d10d      	bne.n	8003d1a <UART_Start_Receive_IT+0xa2>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d104      	bne.n	8003d10 <UART_Start_Receive_IT+0x98>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2260      	movs	r2, #96	; 0x60
 8003d0a:	217f      	movs	r1, #127	; 0x7f
 8003d0c:	5299      	strh	r1, [r3, r2]
 8003d0e:	e008      	b.n	8003d22 <UART_Start_Receive_IT+0xaa>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2260      	movs	r2, #96	; 0x60
 8003d14:	213f      	movs	r1, #63	; 0x3f
 8003d16:	5299      	strh	r1, [r3, r2]
 8003d18:	e003      	b.n	8003d22 <UART_Start_Receive_IT+0xaa>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2260      	movs	r2, #96	; 0x60
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	228c      	movs	r2, #140	; 0x8c
 8003d26:	2100      	movs	r1, #0
 8003d28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2288      	movs	r2, #136	; 0x88
 8003d2e:	2122      	movs	r1, #34	; 0x22
 8003d30:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2101      	movs	r1, #1
 8003d54:	430a      	orrs	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	059b      	lsls	r3, r3, #22
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d150      	bne.n	8003e12 <UART_Start_Receive_IT+0x19a>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2268      	movs	r2, #104	; 0x68
 8003d74:	5a9b      	ldrh	r3, [r3, r2]
 8003d76:	1dba      	adds	r2, r7, #6
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d349      	bcc.n	8003e12 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	015b      	lsls	r3, r3, #5
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d107      	bne.n	8003d9a <UART_Start_Receive_IT+0x122>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <UART_Start_Receive_IT+0x208>)
 8003d96:	671a      	str	r2, [r3, #112]	; 0x70
 8003d98:	e002      	b.n	8003da0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a39      	ldr	r2, [pc, #228]	; (8003e84 <UART_Start_Receive_IT+0x20c>)
 8003d9e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2280      	movs	r2, #128	; 0x80
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dac:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dae:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db2:	2301      	movs	r3, #1
 8003db4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0049      	lsls	r1, r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003de4:	647b      	str	r3, [r7, #68]	; 0x44
 8003de6:	2301      	movs	r3, #1
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	0549      	lsls	r1, r1, #21
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	e02e      	b.n	8003e70 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	015b      	lsls	r3, r3, #5
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d107      	bne.n	8003e2e <UART_Start_Receive_IT+0x1b6>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <UART_Start_Receive_IT+0x210>)
 8003e2a:	671a      	str	r2, [r3, #112]	; 0x70
 8003e2c:	e002      	b.n	8003e34 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <UART_Start_Receive_IT+0x214>)
 8003e32:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2280      	movs	r2, #128	; 0x80
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	613b      	str	r3, [r7, #16]
  return(result);
 8003e42:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003e44:	643b      	str	r3, [r7, #64]	; 0x40
 8003e46:	2301      	movs	r3, #1
 8003e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f383 8810 	msr	PRIMASK, r3
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2190      	movs	r1, #144	; 0x90
 8003e5e:	0049      	lsls	r1, r1, #1
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f383 8810 	msr	PRIMASK, r3
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b014      	add	sp, #80	; 0x50
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	000001ff 	.word	0x000001ff
 8003e80:	0800444d 	.word	0x0800444d
 8003e84:	08004169 	.word	0x08004169
 8003e88:	08003ffd 	.word	0x08003ffd
 8003e8c:	08003e91 	.word	0x08003e91

08003e90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b090      	sub	sp, #64	; 0x40
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e98:	203e      	movs	r0, #62	; 0x3e
 8003e9a:	183b      	adds	r3, r7, r0
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	2160      	movs	r1, #96	; 0x60
 8003ea0:	5a52      	ldrh	r2, [r2, r1]
 8003ea2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2288      	movs	r2, #136	; 0x88
 8003ea8:	589b      	ldr	r3, [r3, r2]
 8003eaa:	2b22      	cmp	r3, #34	; 0x22
 8003eac:	d000      	beq.n	8003eb0 <UART_RxISR_8BIT+0x20>
 8003eae:	e097      	b.n	8003fe0 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003eb6:	213c      	movs	r1, #60	; 0x3c
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ebc:	187b      	adds	r3, r7, r1
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	183b      	adds	r3, r7, r0
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b2d9      	uxtb	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	400a      	ands	r2, r1
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	225e      	movs	r2, #94	; 0x5e
 8003ee0:	5a9b      	ldrh	r3, [r3, r2]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b299      	uxth	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	225e      	movs	r2, #94	; 0x5e
 8003eec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	225e      	movs	r2, #94	; 0x5e
 8003ef2:	5a9b      	ldrh	r3, [r3, r2]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d000      	beq.n	8003efc <UART_RxISR_8BIT+0x6c>
 8003efa:	e079      	b.n	8003ff0 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efc:	f3ef 8310 	mrs	r3, PRIMASK
 8003f00:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f02:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f06:	2301      	movs	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <UART_RxISR_8BIT+0x168>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
 8003f38:	2301      	movs	r3, #1
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2101      	movs	r1, #1
 8003f50:	438a      	bics	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2288      	movs	r2, #136	; 0x88
 8003f64:	2120      	movs	r1, #32
 8003f66:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d12f      	bne.n	8003fd6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f82:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
 8003f86:	2301      	movs	r3, #1
 8003f88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2110      	movs	r1, #16
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d103      	bne.n	8003fc4 <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	225c      	movs	r2, #92	; 0x5c
 8003fc8:	5a9a      	ldrh	r2, [r3, r2]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	0011      	movs	r1, r2
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f7ff fadb 	bl	800358a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fd4:	e00c      	b.n	8003ff0 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fac6 	bl	800356a <HAL_UART_RxCpltCallback>
}
 8003fde:	e007      	b.n	8003ff0 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699a      	ldr	r2, [r3, #24]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2108      	movs	r1, #8
 8003fec:	430a      	orrs	r2, r1
 8003fee:	619a      	str	r2, [r3, #24]
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b010      	add	sp, #64	; 0x40
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	fffffedf 	.word	0xfffffedf

08003ffc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b090      	sub	sp, #64	; 0x40
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004004:	203e      	movs	r0, #62	; 0x3e
 8004006:	183b      	adds	r3, r7, r0
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	2160      	movs	r1, #96	; 0x60
 800400c:	5a52      	ldrh	r2, [r2, r1]
 800400e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2288      	movs	r2, #136	; 0x88
 8004014:	589b      	ldr	r3, [r3, r2]
 8004016:	2b22      	cmp	r3, #34	; 0x22
 8004018:	d000      	beq.n	800401c <UART_RxISR_16BIT+0x20>
 800401a:	e097      	b.n	800414c <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004022:	213c      	movs	r1, #60	; 0x3c
 8004024:	187b      	adds	r3, r7, r1
 8004026:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 800402e:	187b      	adds	r3, r7, r1
 8004030:	183a      	adds	r2, r7, r0
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	4013      	ands	r3, r2
 8004038:	b29a      	uxth	r2, r3
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	1c9a      	adds	r2, r3, #2
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	225e      	movs	r2, #94	; 0x5e
 800404c:	5a9b      	ldrh	r3, [r3, r2]
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b299      	uxth	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	225e      	movs	r2, #94	; 0x5e
 8004058:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	225e      	movs	r2, #94	; 0x5e
 800405e:	5a9b      	ldrh	r3, [r3, r2]
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d000      	beq.n	8004068 <UART_RxISR_16BIT+0x6c>
 8004066:	e079      	b.n	800415c <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004068:	f3ef 8310 	mrs	r3, PRIMASK
 800406c:	617b      	str	r3, [r7, #20]
  return(result);
 800406e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	2301      	movs	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4936      	ldr	r1, [pc, #216]	; (8004164 <UART_RxISR_16BIT+0x168>)
 800408a:	400a      	ands	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409a:	f3ef 8310 	mrs	r3, PRIMASK
 800409e:	623b      	str	r3, [r7, #32]
  return(result);
 80040a0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
 80040a4:	2301      	movs	r3, #1
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2101      	movs	r1, #1
 80040bc:	438a      	bics	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2288      	movs	r2, #136	; 0x88
 80040d0:	2120      	movs	r1, #32
 80040d2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d12f      	bne.n	8004142 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80040ee:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f2:	2301      	movs	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2110      	movs	r1, #16
 800410a:	438a      	bics	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2210      	movs	r2, #16
 8004122:	4013      	ands	r3, r2
 8004124:	2b10      	cmp	r3, #16
 8004126:	d103      	bne.n	8004130 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2210      	movs	r2, #16
 800412e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	225c      	movs	r2, #92	; 0x5c
 8004134:	5a9a      	ldrh	r2, [r3, r2]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0011      	movs	r1, r2
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff fa25 	bl	800358a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004140:	e00c      	b.n	800415c <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	0018      	movs	r0, r3
 8004146:	f7ff fa10 	bl	800356a <HAL_UART_RxCpltCallback>
}
 800414a:	e007      	b.n	800415c <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2108      	movs	r1, #8
 8004158:	430a      	orrs	r2, r1
 800415a:	619a      	str	r2, [r3, #24]
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b010      	add	sp, #64	; 0x40
 8004162:	bd80      	pop	{r7, pc}
 8004164:	fffffedf 	.word	0xfffffedf

08004168 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b09c      	sub	sp, #112	; 0x70
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004170:	236a      	movs	r3, #106	; 0x6a
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	2160      	movs	r1, #96	; 0x60
 8004178:	5a52      	ldrh	r2, [r2, r1]
 800417a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2288      	movs	r2, #136	; 0x88
 8004198:	589b      	ldr	r3, [r3, r2]
 800419a:	2b22      	cmp	r3, #34	; 0x22
 800419c:	d000      	beq.n	80041a0 <UART_RxISR_8BIT_FIFOEN+0x38>
 800419e:	e141      	b.n	8004424 <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80041a0:	235e      	movs	r3, #94	; 0x5e
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	2168      	movs	r1, #104	; 0x68
 80041a8:	5a52      	ldrh	r2, [r2, r1]
 80041aa:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041ac:	e0e8      	b.n	8004380 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b4:	215c      	movs	r1, #92	; 0x5c
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	236a      	movs	r3, #106	; 0x6a
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	b2d9      	uxtb	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	400a      	ands	r2, r1
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	225e      	movs	r2, #94	; 0x5e
 80041e0:	5a9b      	ldrh	r3, [r3, r2]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	3b01      	subs	r3, #1
 80041e6:	b299      	uxth	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	225e      	movs	r2, #94	; 0x5e
 80041ec:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	2207      	movs	r2, #7
 80041fa:	4013      	ands	r3, r2
 80041fc:	d049      	beq.n	8004292 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	2201      	movs	r2, #1
 8004202:	4013      	ands	r3, r2
 8004204:	d010      	beq.n	8004228 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004206:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	4013      	ands	r3, r2
 800420e:	d00b      	beq.n	8004228 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2201      	movs	r2, #1
 8004216:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	228c      	movs	r2, #140	; 0x8c
 800421c:	589b      	ldr	r3, [r3, r2]
 800421e:	2201      	movs	r2, #1
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	218c      	movs	r1, #140	; 0x8c
 8004226:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	2202      	movs	r2, #2
 800422c:	4013      	ands	r3, r2
 800422e:	d00f      	beq.n	8004250 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004232:	2201      	movs	r2, #1
 8004234:	4013      	ands	r3, r2
 8004236:	d00b      	beq.n	8004250 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2202      	movs	r2, #2
 800423e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	228c      	movs	r2, #140	; 0x8c
 8004244:	589b      	ldr	r3, [r3, r2]
 8004246:	2204      	movs	r2, #4
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	218c      	movs	r1, #140	; 0x8c
 800424e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	2204      	movs	r2, #4
 8004254:	4013      	ands	r3, r2
 8004256:	d00f      	beq.n	8004278 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800425a:	2201      	movs	r2, #1
 800425c:	4013      	ands	r3, r2
 800425e:	d00b      	beq.n	8004278 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2204      	movs	r2, #4
 8004266:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	228c      	movs	r2, #140	; 0x8c
 800426c:	589b      	ldr	r3, [r3, r2]
 800426e:	2202      	movs	r2, #2
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	218c      	movs	r1, #140	; 0x8c
 8004276:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	228c      	movs	r2, #140	; 0x8c
 800427c:	589b      	ldr	r3, [r3, r2]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f7ff f978 	bl	800357a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	228c      	movs	r2, #140	; 0x8c
 800428e:	2100      	movs	r1, #0
 8004290:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	225e      	movs	r2, #94	; 0x5e
 8004296:	5a9b      	ldrh	r3, [r3, r2]
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d170      	bne.n	8004380 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800429e:	f3ef 8310 	mrs	r3, PRIMASK
 80042a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80042a8:	2301      	movs	r3, #1
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	495f      	ldr	r1, [pc, #380]	; (800443c <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 80042c0:	400a      	ands	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ca:	f383 8810 	msr	PRIMASK, r3
}
 80042ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d0:	f3ef 8310 	mrs	r3, PRIMASK
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042d8:	657b      	str	r3, [r7, #84]	; 0x54
 80042da:	2301      	movs	r3, #1
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	f383 8810 	msr	PRIMASK, r3
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4953      	ldr	r1, [pc, #332]	; (8004440 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]
 80042f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fc:	f383 8810 	msr	PRIMASK, r3
}
 8004300:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2288      	movs	r2, #136	; 0x88
 8004306:	2120      	movs	r1, #32
 8004308:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d12f      	bne.n	8004378 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431e:	f3ef 8310 	mrs	r3, PRIMASK
 8004322:	623b      	str	r3, [r7, #32]
  return(result);
 8004324:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	653b      	str	r3, [r7, #80]	; 0x50
 8004328:	2301      	movs	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	f383 8810 	msr	PRIMASK, r3
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2110      	movs	r1, #16
 8004340:	438a      	bics	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	2210      	movs	r2, #16
 8004358:	4013      	ands	r3, r2
 800435a:	2b10      	cmp	r3, #16
 800435c:	d103      	bne.n	8004366 <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2210      	movs	r2, #16
 8004364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	225c      	movs	r2, #92	; 0x5c
 800436a:	5a9a      	ldrh	r2, [r3, r2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f7ff f90a 	bl	800358a <HAL_UARTEx_RxEventCallback>
 8004376:	e003      	b.n	8004380 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f7ff f8f5 	bl	800356a <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004380:	235e      	movs	r3, #94	; 0x5e
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <UART_RxISR_8BIT_FIFOEN+0x22c>
 800438a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438c:	2220      	movs	r2, #32
 800438e:	4013      	ands	r3, r2
 8004390:	d000      	beq.n	8004394 <UART_RxISR_8BIT_FIFOEN+0x22c>
 8004392:	e70c      	b.n	80041ae <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004394:	204e      	movs	r0, #78	; 0x4e
 8004396:	183b      	adds	r3, r7, r0
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	215e      	movs	r1, #94	; 0x5e
 800439c:	5a52      	ldrh	r2, [r2, r1]
 800439e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80043a0:	0001      	movs	r1, r0
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d044      	beq.n	8004434 <UART_RxISR_8BIT_FIFOEN+0x2cc>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2268      	movs	r2, #104	; 0x68
 80043ae:	5a9b      	ldrh	r3, [r3, r2]
 80043b0:	187a      	adds	r2, r7, r1
 80043b2:	8812      	ldrh	r2, [r2, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d23d      	bcs.n	8004434 <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b8:	f3ef 8310 	mrs	r3, PRIMASK
 80043bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80043be:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c2:	2301      	movs	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f383 8810 	msr	PRIMASK, r3
}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	491a      	ldr	r1, [pc, #104]	; (8004444 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80043da:	400a      	ands	r2, r1
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a16      	ldr	r2, [pc, #88]	; (8004448 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80043ee:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f0:	f3ef 8310 	mrs	r3, PRIMASK
 80043f4:	617b      	str	r3, [r7, #20]
  return(result);
 80043f6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80043f8:	647b      	str	r3, [r7, #68]	; 0x44
 80043fa:	2301      	movs	r3, #1
 80043fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2120      	movs	r1, #32
 8004412:	430a      	orrs	r2, r1
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004422:	e007      	b.n	8004434 <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2108      	movs	r1, #8
 8004430:	430a      	orrs	r2, r1
 8004432:	619a      	str	r2, [r3, #24]
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b01c      	add	sp, #112	; 0x70
 800443a:	bd80      	pop	{r7, pc}
 800443c:	fffffeff 	.word	0xfffffeff
 8004440:	effffffe 	.word	0xeffffffe
 8004444:	efffffff 	.word	0xefffffff
 8004448:	08003e91 	.word	0x08003e91

0800444c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b09e      	sub	sp, #120	; 0x78
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004454:	2372      	movs	r3, #114	; 0x72
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	2160      	movs	r1, #96	; 0x60
 800445c:	5a52      	ldrh	r2, [r2, r1]
 800445e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2288      	movs	r2, #136	; 0x88
 800447c:	589b      	ldr	r3, [r3, r2]
 800447e:	2b22      	cmp	r3, #34	; 0x22
 8004480:	d000      	beq.n	8004484 <UART_RxISR_16BIT_FIFOEN+0x38>
 8004482:	e141      	b.n	8004708 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004484:	2366      	movs	r3, #102	; 0x66
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	2168      	movs	r1, #104	; 0x68
 800448c:	5a52      	ldrh	r2, [r2, r1]
 800448e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004490:	e0e8      	b.n	8004664 <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004498:	2164      	movs	r1, #100	; 0x64
 800449a:	187b      	adds	r3, r7, r1
 800449c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	2272      	movs	r2, #114	; 0x72
 80044a8:	18ba      	adds	r2, r7, r2
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	4013      	ands	r3, r2
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	225e      	movs	r2, #94	; 0x5e
 80044c4:	5a9b      	ldrh	r3, [r3, r2]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b299      	uxth	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	225e      	movs	r2, #94	; 0x5e
 80044d0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80044da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044dc:	2207      	movs	r2, #7
 80044de:	4013      	ands	r3, r2
 80044e0:	d049      	beq.n	8004576 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e4:	2201      	movs	r2, #1
 80044e6:	4013      	ands	r3, r2
 80044e8:	d010      	beq.n	800450c <UART_RxISR_16BIT_FIFOEN+0xc0>
 80044ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	4013      	ands	r3, r2
 80044f2:	d00b      	beq.n	800450c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2201      	movs	r2, #1
 80044fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	228c      	movs	r2, #140	; 0x8c
 8004500:	589b      	ldr	r3, [r3, r2]
 8004502:	2201      	movs	r2, #1
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	218c      	movs	r1, #140	; 0x8c
 800450a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800450c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800450e:	2202      	movs	r2, #2
 8004510:	4013      	ands	r3, r2
 8004512:	d00f      	beq.n	8004534 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8004514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004516:	2201      	movs	r2, #1
 8004518:	4013      	ands	r3, r2
 800451a:	d00b      	beq.n	8004534 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2202      	movs	r2, #2
 8004522:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	228c      	movs	r2, #140	; 0x8c
 8004528:	589b      	ldr	r3, [r3, r2]
 800452a:	2204      	movs	r2, #4
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	218c      	movs	r1, #140	; 0x8c
 8004532:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004536:	2204      	movs	r2, #4
 8004538:	4013      	ands	r3, r2
 800453a:	d00f      	beq.n	800455c <UART_RxISR_16BIT_FIFOEN+0x110>
 800453c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800453e:	2201      	movs	r2, #1
 8004540:	4013      	ands	r3, r2
 8004542:	d00b      	beq.n	800455c <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2204      	movs	r2, #4
 800454a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	228c      	movs	r2, #140	; 0x8c
 8004550:	589b      	ldr	r3, [r3, r2]
 8004552:	2202      	movs	r2, #2
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	218c      	movs	r1, #140	; 0x8c
 800455a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	228c      	movs	r2, #140	; 0x8c
 8004560:	589b      	ldr	r3, [r3, r2]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f7ff f806 	bl	800357a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	228c      	movs	r2, #140	; 0x8c
 8004572:	2100      	movs	r1, #0
 8004574:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	225e      	movs	r2, #94	; 0x5e
 800457a:	5a9b      	ldrh	r3, [r3, r2]
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d170      	bne.n	8004664 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004582:	f3ef 8310 	mrs	r3, PRIMASK
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800458a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800458c:	2301      	movs	r3, #1
 800458e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	f383 8810 	msr	PRIMASK, r3
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	495f      	ldr	r1, [pc, #380]	; (8004720 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 80045a4:	400a      	ands	r2, r1
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	f383 8810 	msr	PRIMASK, r3
}
 80045b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b4:	f3ef 8310 	mrs	r3, PRIMASK
 80045b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80045ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80045be:	2301      	movs	r3, #1
 80045c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4953      	ldr	r1, [pc, #332]	; (8004724 <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 80045d6:	400a      	ands	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
 80045da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e0:	f383 8810 	msr	PRIMASK, r3
}
 80045e4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2288      	movs	r2, #136	; 0x88
 80045ea:	2120      	movs	r1, #32
 80045ec:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d12f      	bne.n	800465c <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004602:	f3ef 8310 	mrs	r3, PRIMASK
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460a:	657b      	str	r3, [r7, #84]	; 0x54
 800460c:	2301      	movs	r3, #1
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	f383 8810 	msr	PRIMASK, r3
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2110      	movs	r1, #16
 8004624:	438a      	bics	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	2210      	movs	r2, #16
 800463c:	4013      	ands	r3, r2
 800463e:	2b10      	cmp	r3, #16
 8004640:	d103      	bne.n	800464a <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2210      	movs	r2, #16
 8004648:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	225c      	movs	r2, #92	; 0x5c
 800464e:	5a9a      	ldrh	r2, [r3, r2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	0011      	movs	r1, r2
 8004654:	0018      	movs	r0, r3
 8004656:	f7fe ff98 	bl	800358a <HAL_UARTEx_RxEventCallback>
 800465a:	e003      	b.n	8004664 <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	0018      	movs	r0, r3
 8004660:	f7fe ff83 	bl	800356a <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004664:	2366      	movs	r3, #102	; 0x66
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d004      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x22c>
 800466e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004670:	2220      	movs	r2, #32
 8004672:	4013      	ands	r3, r2
 8004674:	d000      	beq.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8004676:	e70c      	b.n	8004492 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004678:	2052      	movs	r0, #82	; 0x52
 800467a:	183b      	adds	r3, r7, r0
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	215e      	movs	r1, #94	; 0x5e
 8004680:	5a52      	ldrh	r2, [r2, r1]
 8004682:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004684:	0001      	movs	r1, r0
 8004686:	187b      	adds	r3, r7, r1
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d044      	beq.n	8004718 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2268      	movs	r2, #104	; 0x68
 8004692:	5a9b      	ldrh	r3, [r3, r2]
 8004694:	187a      	adds	r2, r7, r1
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d23d      	bcs.n	8004718 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8310 	mrs	r3, PRIMASK
 80046a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80046a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a6:	2301      	movs	r3, #1
 80046a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f383 8810 	msr	PRIMASK, r3
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	491a      	ldr	r1, [pc, #104]	; (8004728 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 80046be:	400a      	ands	r2, r1
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f383 8810 	msr	PRIMASK, r3
}
 80046cc:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a16      	ldr	r2, [pc, #88]	; (800472c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80046d2:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d4:	f3ef 8310 	mrs	r3, PRIMASK
 80046d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80046da:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2120      	movs	r1, #32
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f383 8810 	msr	PRIMASK, r3
}
 8004704:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004706:	e007      	b.n	8004718 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2108      	movs	r1, #8
 8004714:	430a      	orrs	r2, r1
 8004716:	619a      	str	r2, [r3, #24]
}
 8004718:	46c0      	nop			; (mov r8, r8)
 800471a:	46bd      	mov	sp, r7
 800471c:	b01e      	add	sp, #120	; 0x78
 800471e:	bd80      	pop	{r7, pc}
 8004720:	fffffeff 	.word	0xfffffeff
 8004724:	effffffe 	.word	0xeffffffe
 8004728:	efffffff 	.word	0xefffffff
 800472c:	08003ffd 	.word	0x08003ffd

08004730 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2280      	movs	r2, #128	; 0x80
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UARTEx_DisableFifoMode+0x16>
 8004742:	2302      	movs	r3, #2
 8004744:	e027      	b.n	8004796 <HAL_UARTEx_DisableFifoMode+0x66>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2280      	movs	r2, #128	; 0x80
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2284      	movs	r2, #132	; 0x84
 8004752:	2124      	movs	r1, #36	; 0x24
 8004754:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2101      	movs	r1, #1
 800476a:	438a      	bics	r2, r1
 800476c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2284      	movs	r2, #132	; 0x84
 8004788:	2120      	movs	r1, #32
 800478a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2280      	movs	r2, #128	; 0x80
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	dfffffff 	.word	0xdfffffff

080047a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e02e      	b.n	800481a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2280      	movs	r2, #128	; 0x80
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2284      	movs	r2, #132	; 0x84
 80047c8:	2124      	movs	r1, #36	; 0x24
 80047ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	08d9      	lsrs	r1, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f854 	bl	80048a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2284      	movs	r2, #132	; 0x84
 800480c:	2120      	movs	r1, #32
 800480e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2280      	movs	r2, #128	; 0x80
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2280      	movs	r2, #128	; 0x80
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e02f      	b.n	800489c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2280      	movs	r2, #128	; 0x80
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2284      	movs	r2, #132	; 0x84
 8004848:	2124      	movs	r1, #36	; 0x24
 800484a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	438a      	bics	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800486c:	4013      	ands	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f813 	bl	80048a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2284      	movs	r2, #132	; 0x84
 800488e:	2120      	movs	r1, #32
 8004890:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2280      	movs	r2, #128	; 0x80
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	f1ffffff 	.word	0xf1ffffff

080048a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d108      	bne.n	80048ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	226a      	movs	r2, #106	; 0x6a
 80048bc:	2101      	movs	r1, #1
 80048be:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2268      	movs	r2, #104	; 0x68
 80048c4:	2101      	movs	r1, #1
 80048c6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048c8:	e043      	b.n	8004952 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ca:	260f      	movs	r6, #15
 80048cc:	19bb      	adds	r3, r7, r6
 80048ce:	2208      	movs	r2, #8
 80048d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048d2:	200e      	movs	r0, #14
 80048d4:	183b      	adds	r3, r7, r0
 80048d6:	2208      	movs	r2, #8
 80048d8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	0e5b      	lsrs	r3, r3, #25
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	240d      	movs	r4, #13
 80048e6:	193b      	adds	r3, r7, r4
 80048e8:	2107      	movs	r1, #7
 80048ea:	400a      	ands	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	0f5b      	lsrs	r3, r3, #29
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	250c      	movs	r5, #12
 80048fa:	197b      	adds	r3, r7, r5
 80048fc:	2107      	movs	r1, #7
 80048fe:	400a      	ands	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004902:	183b      	adds	r3, r7, r0
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	197a      	adds	r2, r7, r5
 8004908:	7812      	ldrb	r2, [r2, #0]
 800490a:	4914      	ldr	r1, [pc, #80]	; (800495c <UARTEx_SetNbDataToProcess+0xb4>)
 800490c:	5c8a      	ldrb	r2, [r1, r2]
 800490e:	435a      	muls	r2, r3
 8004910:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004912:	197b      	adds	r3, r7, r5
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4a12      	ldr	r2, [pc, #72]	; (8004960 <UARTEx_SetNbDataToProcess+0xb8>)
 8004918:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800491a:	0019      	movs	r1, r3
 800491c:	f7fb fc84 	bl	8000228 <__divsi3>
 8004920:	0003      	movs	r3, r0
 8004922:	b299      	uxth	r1, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	226a      	movs	r2, #106	; 0x6a
 8004928:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800492a:	19bb      	adds	r3, r7, r6
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	193a      	adds	r2, r7, r4
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	490a      	ldr	r1, [pc, #40]	; (800495c <UARTEx_SetNbDataToProcess+0xb4>)
 8004934:	5c8a      	ldrb	r2, [r1, r2]
 8004936:	435a      	muls	r2, r3
 8004938:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800493a:	193b      	adds	r3, r7, r4
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	4a08      	ldr	r2, [pc, #32]	; (8004960 <UARTEx_SetNbDataToProcess+0xb8>)
 8004940:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004942:	0019      	movs	r1, r3
 8004944:	f7fb fc70 	bl	8000228 <__divsi3>
 8004948:	0003      	movs	r3, r0
 800494a:	b299      	uxth	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2268      	movs	r2, #104	; 0x68
 8004950:	5299      	strh	r1, [r3, r2]
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	46bd      	mov	sp, r7
 8004956:	b005      	add	sp, #20
 8004958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	08005a34 	.word	0x08005a34
 8004960:	08005a3c 	.word	0x08005a3c

08004964 <__errno>:
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <__errno+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	2000000c 	.word	0x2000000c

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	2600      	movs	r6, #0
 8004974:	4d0c      	ldr	r5, [pc, #48]	; (80049a8 <__libc_init_array+0x38>)
 8004976:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004978:	1b64      	subs	r4, r4, r5
 800497a:	10a4      	asrs	r4, r4, #2
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	2600      	movs	r6, #0
 8004982:	f000 ffbf 	bl	8005904 <_init>
 8004986:	4d0a      	ldr	r5, [pc, #40]	; (80049b0 <__libc_init_array+0x40>)
 8004988:	4c0a      	ldr	r4, [pc, #40]	; (80049b4 <__libc_init_array+0x44>)
 800498a:	1b64      	subs	r4, r4, r5
 800498c:	10a4      	asrs	r4, r4, #2
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	00b3      	lsls	r3, r6, #2
 8004996:	58eb      	ldr	r3, [r5, r3]
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	00b3      	lsls	r3, r6, #2
 80049a0:	58eb      	ldr	r3, [r5, r3]
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08005adc 	.word	0x08005adc
 80049ac:	08005adc 	.word	0x08005adc
 80049b0:	08005adc 	.word	0x08005adc
 80049b4:	08005ae0 	.word	0x08005ae0

080049b8 <memset>:
 80049b8:	0003      	movs	r3, r0
 80049ba:	1882      	adds	r2, r0, r2
 80049bc:	4293      	cmp	r3, r2
 80049be:	d100      	bne.n	80049c2 <memset+0xa>
 80049c0:	4770      	bx	lr
 80049c2:	7019      	strb	r1, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	e7f9      	b.n	80049bc <memset+0x4>

080049c8 <iprintf>:
 80049c8:	b40f      	push	{r0, r1, r2, r3}
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <iprintf+0x30>)
 80049cc:	b513      	push	{r0, r1, r4, lr}
 80049ce:	681c      	ldr	r4, [r3, #0]
 80049d0:	2c00      	cmp	r4, #0
 80049d2:	d005      	beq.n	80049e0 <iprintf+0x18>
 80049d4:	69a3      	ldr	r3, [r4, #24]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <iprintf+0x18>
 80049da:	0020      	movs	r0, r4
 80049dc:	f000 f870 	bl	8004ac0 <__sinit>
 80049e0:	ab05      	add	r3, sp, #20
 80049e2:	0020      	movs	r0, r4
 80049e4:	9a04      	ldr	r2, [sp, #16]
 80049e6:	68a1      	ldr	r1, [r4, #8]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	f000 f993 	bl	8004d14 <_vfiprintf_r>
 80049ee:	bc16      	pop	{r1, r2, r4}
 80049f0:	bc08      	pop	{r3}
 80049f2:	b004      	add	sp, #16
 80049f4:	4718      	bx	r3
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	2000000c 	.word	0x2000000c

080049fc <std>:
 80049fc:	2300      	movs	r3, #0
 80049fe:	b510      	push	{r4, lr}
 8004a00:	0004      	movs	r4, r0
 8004a02:	6003      	str	r3, [r0, #0]
 8004a04:	6043      	str	r3, [r0, #4]
 8004a06:	6083      	str	r3, [r0, #8]
 8004a08:	8181      	strh	r1, [r0, #12]
 8004a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	81c2      	strh	r2, [r0, #14]
 8004a10:	6103      	str	r3, [r0, #16]
 8004a12:	6143      	str	r3, [r0, #20]
 8004a14:	6183      	str	r3, [r0, #24]
 8004a16:	2208      	movs	r2, #8
 8004a18:	305c      	adds	r0, #92	; 0x5c
 8004a1a:	f7ff ffcd 	bl	80049b8 <memset>
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <std+0x38>)
 8004a20:	6263      	str	r3, [r4, #36]	; 0x24
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <std+0x3c>)
 8004a24:	6224      	str	r4, [r4, #32]
 8004a26:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <std+0x40>)
 8004a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a2c:	4b04      	ldr	r3, [pc, #16]	; (8004a40 <std+0x44>)
 8004a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a30:	bd10      	pop	{r4, pc}
 8004a32:	46c0      	nop			; (mov r8, r8)
 8004a34:	080052b1 	.word	0x080052b1
 8004a38:	080052d9 	.word	0x080052d9
 8004a3c:	08005311 	.word	0x08005311
 8004a40:	0800533d 	.word	0x0800533d

08004a44 <_cleanup_r>:
 8004a44:	b510      	push	{r4, lr}
 8004a46:	4902      	ldr	r1, [pc, #8]	; (8004a50 <_cleanup_r+0xc>)
 8004a48:	f000 f8ba 	bl	8004bc0 <_fwalk_reent>
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	08005649 	.word	0x08005649

08004a54 <__sfmoreglue>:
 8004a54:	b570      	push	{r4, r5, r6, lr}
 8004a56:	2568      	movs	r5, #104	; 0x68
 8004a58:	1e4a      	subs	r2, r1, #1
 8004a5a:	4355      	muls	r5, r2
 8004a5c:	000e      	movs	r6, r1
 8004a5e:	0029      	movs	r1, r5
 8004a60:	3174      	adds	r1, #116	; 0x74
 8004a62:	f000 f8d1 	bl	8004c08 <_malloc_r>
 8004a66:	1e04      	subs	r4, r0, #0
 8004a68:	d008      	beq.n	8004a7c <__sfmoreglue+0x28>
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	002a      	movs	r2, r5
 8004a6e:	6001      	str	r1, [r0, #0]
 8004a70:	6046      	str	r6, [r0, #4]
 8004a72:	300c      	adds	r0, #12
 8004a74:	60a0      	str	r0, [r4, #8]
 8004a76:	3268      	adds	r2, #104	; 0x68
 8004a78:	f7ff ff9e 	bl	80049b8 <memset>
 8004a7c:	0020      	movs	r0, r4
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}

08004a80 <__sfp_lock_acquire>:
 8004a80:	b510      	push	{r4, lr}
 8004a82:	4802      	ldr	r0, [pc, #8]	; (8004a8c <__sfp_lock_acquire+0xc>)
 8004a84:	f000 f8bd 	bl	8004c02 <__retarget_lock_acquire_recursive>
 8004a88:	bd10      	pop	{r4, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	200001d0 	.word	0x200001d0

08004a90 <__sfp_lock_release>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	4802      	ldr	r0, [pc, #8]	; (8004a9c <__sfp_lock_release+0xc>)
 8004a94:	f000 f8b6 	bl	8004c04 <__retarget_lock_release_recursive>
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	200001d0 	.word	0x200001d0

08004aa0 <__sinit_lock_acquire>:
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	4802      	ldr	r0, [pc, #8]	; (8004aac <__sinit_lock_acquire+0xc>)
 8004aa4:	f000 f8ad 	bl	8004c02 <__retarget_lock_acquire_recursive>
 8004aa8:	bd10      	pop	{r4, pc}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	200001cb 	.word	0x200001cb

08004ab0 <__sinit_lock_release>:
 8004ab0:	b510      	push	{r4, lr}
 8004ab2:	4802      	ldr	r0, [pc, #8]	; (8004abc <__sinit_lock_release+0xc>)
 8004ab4:	f000 f8a6 	bl	8004c04 <__retarget_lock_release_recursive>
 8004ab8:	bd10      	pop	{r4, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	200001cb 	.word	0x200001cb

08004ac0 <__sinit>:
 8004ac0:	b513      	push	{r0, r1, r4, lr}
 8004ac2:	0004      	movs	r4, r0
 8004ac4:	f7ff ffec 	bl	8004aa0 <__sinit_lock_acquire>
 8004ac8:	69a3      	ldr	r3, [r4, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <__sinit+0x14>
 8004ace:	f7ff ffef 	bl	8004ab0 <__sinit_lock_release>
 8004ad2:	bd13      	pop	{r0, r1, r4, pc}
 8004ad4:	64a3      	str	r3, [r4, #72]	; 0x48
 8004ad6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <__sinit+0x68>)
 8004adc:	4a13      	ldr	r2, [pc, #76]	; (8004b2c <__sinit+0x6c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d101      	bne.n	8004aec <__sinit+0x2c>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61a3      	str	r3, [r4, #24]
 8004aec:	0020      	movs	r0, r4
 8004aee:	f000 f81f 	bl	8004b30 <__sfp>
 8004af2:	6060      	str	r0, [r4, #4]
 8004af4:	0020      	movs	r0, r4
 8004af6:	f000 f81b 	bl	8004b30 <__sfp>
 8004afa:	60a0      	str	r0, [r4, #8]
 8004afc:	0020      	movs	r0, r4
 8004afe:	f000 f817 	bl	8004b30 <__sfp>
 8004b02:	2200      	movs	r2, #0
 8004b04:	2104      	movs	r1, #4
 8004b06:	60e0      	str	r0, [r4, #12]
 8004b08:	6860      	ldr	r0, [r4, #4]
 8004b0a:	f7ff ff77 	bl	80049fc <std>
 8004b0e:	2201      	movs	r2, #1
 8004b10:	2109      	movs	r1, #9
 8004b12:	68a0      	ldr	r0, [r4, #8]
 8004b14:	f7ff ff72 	bl	80049fc <std>
 8004b18:	2202      	movs	r2, #2
 8004b1a:	2112      	movs	r1, #18
 8004b1c:	68e0      	ldr	r0, [r4, #12]
 8004b1e:	f7ff ff6d 	bl	80049fc <std>
 8004b22:	2301      	movs	r3, #1
 8004b24:	61a3      	str	r3, [r4, #24]
 8004b26:	e7d2      	b.n	8004ace <__sinit+0xe>
 8004b28:	08005a44 	.word	0x08005a44
 8004b2c:	08004a45 	.word	0x08004a45

08004b30 <__sfp>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	0007      	movs	r7, r0
 8004b34:	f7ff ffa4 	bl	8004a80 <__sfp_lock_acquire>
 8004b38:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <__sfp+0x88>)
 8004b3a:	681e      	ldr	r6, [r3, #0]
 8004b3c:	69b3      	ldr	r3, [r6, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <__sfp+0x18>
 8004b42:	0030      	movs	r0, r6
 8004b44:	f7ff ffbc 	bl	8004ac0 <__sinit>
 8004b48:	3648      	adds	r6, #72	; 0x48
 8004b4a:	68b4      	ldr	r4, [r6, #8]
 8004b4c:	6873      	ldr	r3, [r6, #4]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	d504      	bpl.n	8004b5c <__sfp+0x2c>
 8004b52:	6833      	ldr	r3, [r6, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d022      	beq.n	8004b9e <__sfp+0x6e>
 8004b58:	6836      	ldr	r6, [r6, #0]
 8004b5a:	e7f6      	b.n	8004b4a <__sfp+0x1a>
 8004b5c:	220c      	movs	r2, #12
 8004b5e:	5ea5      	ldrsh	r5, [r4, r2]
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d11a      	bne.n	8004b9a <__sfp+0x6a>
 8004b64:	0020      	movs	r0, r4
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <__sfp+0x8c>)
 8004b68:	3058      	adds	r0, #88	; 0x58
 8004b6a:	60e3      	str	r3, [r4, #12]
 8004b6c:	6665      	str	r5, [r4, #100]	; 0x64
 8004b6e:	f000 f847 	bl	8004c00 <__retarget_lock_init_recursive>
 8004b72:	f7ff ff8d 	bl	8004a90 <__sfp_lock_release>
 8004b76:	0020      	movs	r0, r4
 8004b78:	2208      	movs	r2, #8
 8004b7a:	0029      	movs	r1, r5
 8004b7c:	6025      	str	r5, [r4, #0]
 8004b7e:	60a5      	str	r5, [r4, #8]
 8004b80:	6065      	str	r5, [r4, #4]
 8004b82:	6125      	str	r5, [r4, #16]
 8004b84:	6165      	str	r5, [r4, #20]
 8004b86:	61a5      	str	r5, [r4, #24]
 8004b88:	305c      	adds	r0, #92	; 0x5c
 8004b8a:	f7ff ff15 	bl	80049b8 <memset>
 8004b8e:	6365      	str	r5, [r4, #52]	; 0x34
 8004b90:	63a5      	str	r5, [r4, #56]	; 0x38
 8004b92:	64a5      	str	r5, [r4, #72]	; 0x48
 8004b94:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004b96:	0020      	movs	r0, r4
 8004b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b9a:	3468      	adds	r4, #104	; 0x68
 8004b9c:	e7d7      	b.n	8004b4e <__sfp+0x1e>
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	0038      	movs	r0, r7
 8004ba2:	f7ff ff57 	bl	8004a54 <__sfmoreglue>
 8004ba6:	1e04      	subs	r4, r0, #0
 8004ba8:	6030      	str	r0, [r6, #0]
 8004baa:	d1d5      	bne.n	8004b58 <__sfp+0x28>
 8004bac:	f7ff ff70 	bl	8004a90 <__sfp_lock_release>
 8004bb0:	230c      	movs	r3, #12
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	e7ef      	b.n	8004b96 <__sfp+0x66>
 8004bb6:	46c0      	nop			; (mov r8, r8)
 8004bb8:	08005a44 	.word	0x08005a44
 8004bbc:	ffff0001 	.word	0xffff0001

08004bc0 <_fwalk_reent>:
 8004bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc2:	0004      	movs	r4, r0
 8004bc4:	0006      	movs	r6, r0
 8004bc6:	2700      	movs	r7, #0
 8004bc8:	9101      	str	r1, [sp, #4]
 8004bca:	3448      	adds	r4, #72	; 0x48
 8004bcc:	6863      	ldr	r3, [r4, #4]
 8004bce:	68a5      	ldr	r5, [r4, #8]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	9b00      	ldr	r3, [sp, #0]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	d504      	bpl.n	8004be4 <_fwalk_reent+0x24>
 8004bda:	6824      	ldr	r4, [r4, #0]
 8004bdc:	2c00      	cmp	r4, #0
 8004bde:	d1f5      	bne.n	8004bcc <_fwalk_reent+0xc>
 8004be0:	0038      	movs	r0, r7
 8004be2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004be4:	89ab      	ldrh	r3, [r5, #12]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d908      	bls.n	8004bfc <_fwalk_reent+0x3c>
 8004bea:	220e      	movs	r2, #14
 8004bec:	5eab      	ldrsh	r3, [r5, r2]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	d004      	beq.n	8004bfc <_fwalk_reent+0x3c>
 8004bf2:	0029      	movs	r1, r5
 8004bf4:	0030      	movs	r0, r6
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	4798      	blx	r3
 8004bfa:	4307      	orrs	r7, r0
 8004bfc:	3568      	adds	r5, #104	; 0x68
 8004bfe:	e7e8      	b.n	8004bd2 <_fwalk_reent+0x12>

08004c00 <__retarget_lock_init_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_acquire_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <__retarget_lock_release_recursive>:
 8004c04:	4770      	bx	lr
	...

08004c08 <_malloc_r>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	1ccd      	adds	r5, r1, #3
 8004c0e:	439d      	bics	r5, r3
 8004c10:	3508      	adds	r5, #8
 8004c12:	0006      	movs	r6, r0
 8004c14:	2d0c      	cmp	r5, #12
 8004c16:	d21f      	bcs.n	8004c58 <_malloc_r+0x50>
 8004c18:	250c      	movs	r5, #12
 8004c1a:	42a9      	cmp	r1, r5
 8004c1c:	d81e      	bhi.n	8004c5c <_malloc_r+0x54>
 8004c1e:	0030      	movs	r0, r6
 8004c20:	f000 fdde 	bl	80057e0 <__malloc_lock>
 8004c24:	4925      	ldr	r1, [pc, #148]	; (8004cbc <_malloc_r+0xb4>)
 8004c26:	680a      	ldr	r2, [r1, #0]
 8004c28:	0014      	movs	r4, r2
 8004c2a:	2c00      	cmp	r4, #0
 8004c2c:	d11a      	bne.n	8004c64 <_malloc_r+0x5c>
 8004c2e:	4f24      	ldr	r7, [pc, #144]	; (8004cc0 <_malloc_r+0xb8>)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d104      	bne.n	8004c40 <_malloc_r+0x38>
 8004c36:	0021      	movs	r1, r4
 8004c38:	0030      	movs	r0, r6
 8004c3a:	f000 fb27 	bl	800528c <_sbrk_r>
 8004c3e:	6038      	str	r0, [r7, #0]
 8004c40:	0029      	movs	r1, r5
 8004c42:	0030      	movs	r0, r6
 8004c44:	f000 fb22 	bl	800528c <_sbrk_r>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d12b      	bne.n	8004ca4 <_malloc_r+0x9c>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	0030      	movs	r0, r6
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	f000 fdcd 	bl	80057f0 <__malloc_unlock>
 8004c56:	e003      	b.n	8004c60 <_malloc_r+0x58>
 8004c58:	2d00      	cmp	r5, #0
 8004c5a:	dade      	bge.n	8004c1a <_malloc_r+0x12>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	6033      	str	r3, [r6, #0]
 8004c60:	2000      	movs	r0, #0
 8004c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	1b5b      	subs	r3, r3, r5
 8004c68:	d419      	bmi.n	8004c9e <_malloc_r+0x96>
 8004c6a:	2b0b      	cmp	r3, #11
 8004c6c:	d903      	bls.n	8004c76 <_malloc_r+0x6e>
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	18e4      	adds	r4, r4, r3
 8004c72:	6025      	str	r5, [r4, #0]
 8004c74:	e003      	b.n	8004c7e <_malloc_r+0x76>
 8004c76:	6863      	ldr	r3, [r4, #4]
 8004c78:	42a2      	cmp	r2, r4
 8004c7a:	d10e      	bne.n	8004c9a <_malloc_r+0x92>
 8004c7c:	600b      	str	r3, [r1, #0]
 8004c7e:	0030      	movs	r0, r6
 8004c80:	f000 fdb6 	bl	80057f0 <__malloc_unlock>
 8004c84:	0020      	movs	r0, r4
 8004c86:	2207      	movs	r2, #7
 8004c88:	300b      	adds	r0, #11
 8004c8a:	1d23      	adds	r3, r4, #4
 8004c8c:	4390      	bics	r0, r2
 8004c8e:	1ac2      	subs	r2, r0, r3
 8004c90:	4298      	cmp	r0, r3
 8004c92:	d0e6      	beq.n	8004c62 <_malloc_r+0x5a>
 8004c94:	1a1b      	subs	r3, r3, r0
 8004c96:	50a3      	str	r3, [r4, r2]
 8004c98:	e7e3      	b.n	8004c62 <_malloc_r+0x5a>
 8004c9a:	6053      	str	r3, [r2, #4]
 8004c9c:	e7ef      	b.n	8004c7e <_malloc_r+0x76>
 8004c9e:	0022      	movs	r2, r4
 8004ca0:	6864      	ldr	r4, [r4, #4]
 8004ca2:	e7c2      	b.n	8004c2a <_malloc_r+0x22>
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	1cc4      	adds	r4, r0, #3
 8004ca8:	439c      	bics	r4, r3
 8004caa:	42a0      	cmp	r0, r4
 8004cac:	d0e1      	beq.n	8004c72 <_malloc_r+0x6a>
 8004cae:	1a21      	subs	r1, r4, r0
 8004cb0:	0030      	movs	r0, r6
 8004cb2:	f000 faeb 	bl	800528c <_sbrk_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d1db      	bne.n	8004c72 <_malloc_r+0x6a>
 8004cba:	e7c7      	b.n	8004c4c <_malloc_r+0x44>
 8004cbc:	20000090 	.word	0x20000090
 8004cc0:	20000094 	.word	0x20000094

08004cc4 <__sfputc_r>:
 8004cc4:	6893      	ldr	r3, [r2, #8]
 8004cc6:	b510      	push	{r4, lr}
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	6093      	str	r3, [r2, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da04      	bge.n	8004cda <__sfputc_r+0x16>
 8004cd0:	6994      	ldr	r4, [r2, #24]
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	db07      	blt.n	8004ce6 <__sfputc_r+0x22>
 8004cd6:	290a      	cmp	r1, #10
 8004cd8:	d005      	beq.n	8004ce6 <__sfputc_r+0x22>
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	1c58      	adds	r0, r3, #1
 8004cde:	6010      	str	r0, [r2, #0]
 8004ce0:	7019      	strb	r1, [r3, #0]
 8004ce2:	0008      	movs	r0, r1
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	f000 fb2f 	bl	8005348 <__swbuf_r>
 8004cea:	0001      	movs	r1, r0
 8004cec:	e7f9      	b.n	8004ce2 <__sfputc_r+0x1e>

08004cee <__sfputs_r>:
 8004cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf0:	0006      	movs	r6, r0
 8004cf2:	000f      	movs	r7, r1
 8004cf4:	0014      	movs	r4, r2
 8004cf6:	18d5      	adds	r5, r2, r3
 8004cf8:	42ac      	cmp	r4, r5
 8004cfa:	d101      	bne.n	8004d00 <__sfputs_r+0x12>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e007      	b.n	8004d10 <__sfputs_r+0x22>
 8004d00:	7821      	ldrb	r1, [r4, #0]
 8004d02:	003a      	movs	r2, r7
 8004d04:	0030      	movs	r0, r6
 8004d06:	f7ff ffdd 	bl	8004cc4 <__sfputc_r>
 8004d0a:	3401      	adds	r4, #1
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d1f3      	bne.n	8004cf8 <__sfputs_r+0xa>
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d14 <_vfiprintf_r>:
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d16:	b0a1      	sub	sp, #132	; 0x84
 8004d18:	0006      	movs	r6, r0
 8004d1a:	000c      	movs	r4, r1
 8004d1c:	001f      	movs	r7, r3
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d004      	beq.n	8004d2e <_vfiprintf_r+0x1a>
 8004d24:	6983      	ldr	r3, [r0, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <_vfiprintf_r+0x1a>
 8004d2a:	f7ff fec9 	bl	8004ac0 <__sinit>
 8004d2e:	4b8e      	ldr	r3, [pc, #568]	; (8004f68 <_vfiprintf_r+0x254>)
 8004d30:	429c      	cmp	r4, r3
 8004d32:	d11c      	bne.n	8004d6e <_vfiprintf_r+0x5a>
 8004d34:	6874      	ldr	r4, [r6, #4]
 8004d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d38:	07db      	lsls	r3, r3, #31
 8004d3a:	d405      	bmi.n	8004d48 <_vfiprintf_r+0x34>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	059b      	lsls	r3, r3, #22
 8004d40:	d402      	bmi.n	8004d48 <_vfiprintf_r+0x34>
 8004d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d44:	f7ff ff5d 	bl	8004c02 <__retarget_lock_acquire_recursive>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	071b      	lsls	r3, r3, #28
 8004d4c:	d502      	bpl.n	8004d54 <_vfiprintf_r+0x40>
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11d      	bne.n	8004d90 <_vfiprintf_r+0x7c>
 8004d54:	0021      	movs	r1, r4
 8004d56:	0030      	movs	r0, r6
 8004d58:	f000 fb60 	bl	800541c <__swsetup_r>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d017      	beq.n	8004d90 <_vfiprintf_r+0x7c>
 8004d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d62:	07db      	lsls	r3, r3, #31
 8004d64:	d50d      	bpl.n	8004d82 <_vfiprintf_r+0x6e>
 8004d66:	2001      	movs	r0, #1
 8004d68:	4240      	negs	r0, r0
 8004d6a:	b021      	add	sp, #132	; 0x84
 8004d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d6e:	4b7f      	ldr	r3, [pc, #508]	; (8004f6c <_vfiprintf_r+0x258>)
 8004d70:	429c      	cmp	r4, r3
 8004d72:	d101      	bne.n	8004d78 <_vfiprintf_r+0x64>
 8004d74:	68b4      	ldr	r4, [r6, #8]
 8004d76:	e7de      	b.n	8004d36 <_vfiprintf_r+0x22>
 8004d78:	4b7d      	ldr	r3, [pc, #500]	; (8004f70 <_vfiprintf_r+0x25c>)
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d1db      	bne.n	8004d36 <_vfiprintf_r+0x22>
 8004d7e:	68f4      	ldr	r4, [r6, #12]
 8004d80:	e7d9      	b.n	8004d36 <_vfiprintf_r+0x22>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d4ee      	bmi.n	8004d66 <_vfiprintf_r+0x52>
 8004d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8a:	f7ff ff3b 	bl	8004c04 <__retarget_lock_release_recursive>
 8004d8e:	e7ea      	b.n	8004d66 <_vfiprintf_r+0x52>
 8004d90:	2300      	movs	r3, #0
 8004d92:	ad08      	add	r5, sp, #32
 8004d94:	616b      	str	r3, [r5, #20]
 8004d96:	3320      	adds	r3, #32
 8004d98:	766b      	strb	r3, [r5, #25]
 8004d9a:	3310      	adds	r3, #16
 8004d9c:	76ab      	strb	r3, [r5, #26]
 8004d9e:	9707      	str	r7, [sp, #28]
 8004da0:	9f03      	ldr	r7, [sp, #12]
 8004da2:	783b      	ldrb	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <_vfiprintf_r+0x98>
 8004da8:	2b25      	cmp	r3, #37	; 0x25
 8004daa:	d14e      	bne.n	8004e4a <_vfiprintf_r+0x136>
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	1afb      	subs	r3, r7, r3
 8004db0:	9305      	str	r3, [sp, #20]
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	429f      	cmp	r7, r3
 8004db6:	d00d      	beq.n	8004dd4 <_vfiprintf_r+0xc0>
 8004db8:	9b05      	ldr	r3, [sp, #20]
 8004dba:	0021      	movs	r1, r4
 8004dbc:	0030      	movs	r0, r6
 8004dbe:	9a03      	ldr	r2, [sp, #12]
 8004dc0:	f7ff ff95 	bl	8004cee <__sfputs_r>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d100      	bne.n	8004dca <_vfiprintf_r+0xb6>
 8004dc8:	e0b5      	b.n	8004f36 <_vfiprintf_r+0x222>
 8004dca:	696a      	ldr	r2, [r5, #20]
 8004dcc:	9b05      	ldr	r3, [sp, #20]
 8004dce:	4694      	mov	ip, r2
 8004dd0:	4463      	add	r3, ip
 8004dd2:	616b      	str	r3, [r5, #20]
 8004dd4:	783b      	ldrb	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d100      	bne.n	8004ddc <_vfiprintf_r+0xc8>
 8004dda:	e0ac      	b.n	8004f36 <_vfiprintf_r+0x222>
 8004ddc:	2201      	movs	r2, #1
 8004dde:	1c7b      	adds	r3, r7, #1
 8004de0:	9303      	str	r3, [sp, #12]
 8004de2:	2300      	movs	r3, #0
 8004de4:	4252      	negs	r2, r2
 8004de6:	606a      	str	r2, [r5, #4]
 8004de8:	a904      	add	r1, sp, #16
 8004dea:	3254      	adds	r2, #84	; 0x54
 8004dec:	1852      	adds	r2, r2, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	60eb      	str	r3, [r5, #12]
 8004df2:	60ab      	str	r3, [r5, #8]
 8004df4:	7013      	strb	r3, [r2, #0]
 8004df6:	65ab      	str	r3, [r5, #88]	; 0x58
 8004df8:	9b03      	ldr	r3, [sp, #12]
 8004dfa:	2205      	movs	r2, #5
 8004dfc:	7819      	ldrb	r1, [r3, #0]
 8004dfe:	485d      	ldr	r0, [pc, #372]	; (8004f74 <_vfiprintf_r+0x260>)
 8004e00:	f000 fce2 	bl	80057c8 <memchr>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	1c5f      	adds	r7, r3, #1
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d120      	bne.n	8004e4e <_vfiprintf_r+0x13a>
 8004e0c:	682a      	ldr	r2, [r5, #0]
 8004e0e:	06d3      	lsls	r3, r2, #27
 8004e10:	d504      	bpl.n	8004e1c <_vfiprintf_r+0x108>
 8004e12:	2353      	movs	r3, #83	; 0x53
 8004e14:	a904      	add	r1, sp, #16
 8004e16:	185b      	adds	r3, r3, r1
 8004e18:	2120      	movs	r1, #32
 8004e1a:	7019      	strb	r1, [r3, #0]
 8004e1c:	0713      	lsls	r3, r2, #28
 8004e1e:	d504      	bpl.n	8004e2a <_vfiprintf_r+0x116>
 8004e20:	2353      	movs	r3, #83	; 0x53
 8004e22:	a904      	add	r1, sp, #16
 8004e24:	185b      	adds	r3, r3, r1
 8004e26:	212b      	movs	r1, #43	; 0x2b
 8004e28:	7019      	strb	r1, [r3, #0]
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e30:	d016      	beq.n	8004e60 <_vfiprintf_r+0x14c>
 8004e32:	2100      	movs	r1, #0
 8004e34:	68eb      	ldr	r3, [r5, #12]
 8004e36:	9f03      	ldr	r7, [sp, #12]
 8004e38:	783a      	ldrb	r2, [r7, #0]
 8004e3a:	1c78      	adds	r0, r7, #1
 8004e3c:	3a30      	subs	r2, #48	; 0x30
 8004e3e:	4684      	mov	ip, r0
 8004e40:	2a09      	cmp	r2, #9
 8004e42:	d94f      	bls.n	8004ee4 <_vfiprintf_r+0x1d0>
 8004e44:	2900      	cmp	r1, #0
 8004e46:	d111      	bne.n	8004e6c <_vfiprintf_r+0x158>
 8004e48:	e017      	b.n	8004e7a <_vfiprintf_r+0x166>
 8004e4a:	3701      	adds	r7, #1
 8004e4c:	e7a9      	b.n	8004da2 <_vfiprintf_r+0x8e>
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <_vfiprintf_r+0x260>)
 8004e50:	682a      	ldr	r2, [r5, #0]
 8004e52:	1ac0      	subs	r0, r0, r3
 8004e54:	2301      	movs	r3, #1
 8004e56:	4083      	lsls	r3, r0
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	9703      	str	r7, [sp, #12]
 8004e5e:	e7cb      	b.n	8004df8 <_vfiprintf_r+0xe4>
 8004e60:	9b07      	ldr	r3, [sp, #28]
 8004e62:	1d19      	adds	r1, r3, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	9107      	str	r1, [sp, #28]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db01      	blt.n	8004e70 <_vfiprintf_r+0x15c>
 8004e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e6e:	e004      	b.n	8004e7a <_vfiprintf_r+0x166>
 8004e70:	425b      	negs	r3, r3
 8004e72:	60eb      	str	r3, [r5, #12]
 8004e74:	2302      	movs	r3, #2
 8004e76:	4313      	orrs	r3, r2
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	783b      	ldrb	r3, [r7, #0]
 8004e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e7e:	d10a      	bne.n	8004e96 <_vfiprintf_r+0x182>
 8004e80:	787b      	ldrb	r3, [r7, #1]
 8004e82:	2b2a      	cmp	r3, #42	; 0x2a
 8004e84:	d137      	bne.n	8004ef6 <_vfiprintf_r+0x1e2>
 8004e86:	9b07      	ldr	r3, [sp, #28]
 8004e88:	3702      	adds	r7, #2
 8004e8a:	1d1a      	adds	r2, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9207      	str	r2, [sp, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	db2d      	blt.n	8004ef0 <_vfiprintf_r+0x1dc>
 8004e94:	9309      	str	r3, [sp, #36]	; 0x24
 8004e96:	2203      	movs	r2, #3
 8004e98:	7839      	ldrb	r1, [r7, #0]
 8004e9a:	4837      	ldr	r0, [pc, #220]	; (8004f78 <_vfiprintf_r+0x264>)
 8004e9c:	f000 fc94 	bl	80057c8 <memchr>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	d007      	beq.n	8004eb4 <_vfiprintf_r+0x1a0>
 8004ea4:	4b34      	ldr	r3, [pc, #208]	; (8004f78 <_vfiprintf_r+0x264>)
 8004ea6:	682a      	ldr	r2, [r5, #0]
 8004ea8:	1ac0      	subs	r0, r0, r3
 8004eaa:	2340      	movs	r3, #64	; 0x40
 8004eac:	4083      	lsls	r3, r0
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	3701      	adds	r7, #1
 8004eb2:	602b      	str	r3, [r5, #0]
 8004eb4:	7839      	ldrb	r1, [r7, #0]
 8004eb6:	1c7b      	adds	r3, r7, #1
 8004eb8:	2206      	movs	r2, #6
 8004eba:	4830      	ldr	r0, [pc, #192]	; (8004f7c <_vfiprintf_r+0x268>)
 8004ebc:	9303      	str	r3, [sp, #12]
 8004ebe:	7629      	strb	r1, [r5, #24]
 8004ec0:	f000 fc82 	bl	80057c8 <memchr>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d045      	beq.n	8004f54 <_vfiprintf_r+0x240>
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <_vfiprintf_r+0x26c>)
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d127      	bne.n	8004f1e <_vfiprintf_r+0x20a>
 8004ece:	2207      	movs	r2, #7
 8004ed0:	9b07      	ldr	r3, [sp, #28]
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	4393      	bics	r3, r2
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	9307      	str	r3, [sp, #28]
 8004eda:	696b      	ldr	r3, [r5, #20]
 8004edc:	9a04      	ldr	r2, [sp, #16]
 8004ede:	189b      	adds	r3, r3, r2
 8004ee0:	616b      	str	r3, [r5, #20]
 8004ee2:	e75d      	b.n	8004da0 <_vfiprintf_r+0x8c>
 8004ee4:	210a      	movs	r1, #10
 8004ee6:	434b      	muls	r3, r1
 8004ee8:	4667      	mov	r7, ip
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	3909      	subs	r1, #9
 8004eee:	e7a3      	b.n	8004e38 <_vfiprintf_r+0x124>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	425b      	negs	r3, r3
 8004ef4:	e7ce      	b.n	8004e94 <_vfiprintf_r+0x180>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	001a      	movs	r2, r3
 8004efa:	3701      	adds	r7, #1
 8004efc:	606b      	str	r3, [r5, #4]
 8004efe:	7839      	ldrb	r1, [r7, #0]
 8004f00:	1c78      	adds	r0, r7, #1
 8004f02:	3930      	subs	r1, #48	; 0x30
 8004f04:	4684      	mov	ip, r0
 8004f06:	2909      	cmp	r1, #9
 8004f08:	d903      	bls.n	8004f12 <_vfiprintf_r+0x1fe>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0c3      	beq.n	8004e96 <_vfiprintf_r+0x182>
 8004f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8004f10:	e7c1      	b.n	8004e96 <_vfiprintf_r+0x182>
 8004f12:	230a      	movs	r3, #10
 8004f14:	435a      	muls	r2, r3
 8004f16:	4667      	mov	r7, ip
 8004f18:	1852      	adds	r2, r2, r1
 8004f1a:	3b09      	subs	r3, #9
 8004f1c:	e7ef      	b.n	8004efe <_vfiprintf_r+0x1ea>
 8004f1e:	ab07      	add	r3, sp, #28
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	0022      	movs	r2, r4
 8004f24:	0029      	movs	r1, r5
 8004f26:	0030      	movs	r0, r6
 8004f28:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <_vfiprintf_r+0x270>)
 8004f2a:	e000      	b.n	8004f2e <_vfiprintf_r+0x21a>
 8004f2c:	bf00      	nop
 8004f2e:	9004      	str	r0, [sp, #16]
 8004f30:	9b04      	ldr	r3, [sp, #16]
 8004f32:	3301      	adds	r3, #1
 8004f34:	d1d1      	bne.n	8004eda <_vfiprintf_r+0x1c6>
 8004f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f38:	07db      	lsls	r3, r3, #31
 8004f3a:	d405      	bmi.n	8004f48 <_vfiprintf_r+0x234>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	059b      	lsls	r3, r3, #22
 8004f40:	d402      	bmi.n	8004f48 <_vfiprintf_r+0x234>
 8004f42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f44:	f7ff fe5e 	bl	8004c04 <__retarget_lock_release_recursive>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	065b      	lsls	r3, r3, #25
 8004f4c:	d500      	bpl.n	8004f50 <_vfiprintf_r+0x23c>
 8004f4e:	e70a      	b.n	8004d66 <_vfiprintf_r+0x52>
 8004f50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004f52:	e70a      	b.n	8004d6a <_vfiprintf_r+0x56>
 8004f54:	ab07      	add	r3, sp, #28
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	0022      	movs	r2, r4
 8004f5a:	0029      	movs	r1, r5
 8004f5c:	0030      	movs	r0, r6
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <_vfiprintf_r+0x270>)
 8004f60:	f000 f882 	bl	8005068 <_printf_i>
 8004f64:	e7e3      	b.n	8004f2e <_vfiprintf_r+0x21a>
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	08005a68 	.word	0x08005a68
 8004f6c:	08005a88 	.word	0x08005a88
 8004f70:	08005a48 	.word	0x08005a48
 8004f74:	08005aa8 	.word	0x08005aa8
 8004f78:	08005aae 	.word	0x08005aae
 8004f7c:	08005ab2 	.word	0x08005ab2
 8004f80:	00000000 	.word	0x00000000
 8004f84:	08004cef 	.word	0x08004cef

08004f88 <_printf_common>:
 8004f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f8a:	0015      	movs	r5, r2
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	688a      	ldr	r2, [r1, #8]
 8004f90:	690b      	ldr	r3, [r1, #16]
 8004f92:	000c      	movs	r4, r1
 8004f94:	9000      	str	r0, [sp, #0]
 8004f96:	4293      	cmp	r3, r2
 8004f98:	da00      	bge.n	8004f9c <_printf_common+0x14>
 8004f9a:	0013      	movs	r3, r2
 8004f9c:	0022      	movs	r2, r4
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	3243      	adds	r2, #67	; 0x43
 8004fa2:	7812      	ldrb	r2, [r2, #0]
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	d001      	beq.n	8004fac <_printf_common+0x24>
 8004fa8:	3301      	adds	r3, #1
 8004faa:	602b      	str	r3, [r5, #0]
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	d502      	bpl.n	8004fb8 <_printf_common+0x30>
 8004fb2:	682b      	ldr	r3, [r5, #0]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	2306      	movs	r3, #6
 8004fbc:	0017      	movs	r7, r2
 8004fbe:	401f      	ands	r7, r3
 8004fc0:	421a      	tst	r2, r3
 8004fc2:	d027      	beq.n	8005014 <_printf_common+0x8c>
 8004fc4:	0023      	movs	r3, r4
 8004fc6:	3343      	adds	r3, #67	; 0x43
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	4193      	sbcs	r3, r2
 8004fce:	6822      	ldr	r2, [r4, #0]
 8004fd0:	0692      	lsls	r2, r2, #26
 8004fd2:	d430      	bmi.n	8005036 <_printf_common+0xae>
 8004fd4:	0022      	movs	r2, r4
 8004fd6:	9901      	ldr	r1, [sp, #4]
 8004fd8:	9800      	ldr	r0, [sp, #0]
 8004fda:	9e08      	ldr	r6, [sp, #32]
 8004fdc:	3243      	adds	r2, #67	; 0x43
 8004fde:	47b0      	blx	r6
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d025      	beq.n	8005030 <_printf_common+0xa8>
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	6820      	ldr	r0, [r4, #0]
 8004fe8:	682a      	ldr	r2, [r5, #0]
 8004fea:	68e1      	ldr	r1, [r4, #12]
 8004fec:	2500      	movs	r5, #0
 8004fee:	4003      	ands	r3, r0
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d103      	bne.n	8004ffc <_printf_common+0x74>
 8004ff4:	1a8d      	subs	r5, r1, r2
 8004ff6:	43eb      	mvns	r3, r5
 8004ff8:	17db      	asrs	r3, r3, #31
 8004ffa:	401d      	ands	r5, r3
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	6922      	ldr	r2, [r4, #16]
 8005000:	4293      	cmp	r3, r2
 8005002:	dd01      	ble.n	8005008 <_printf_common+0x80>
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	18ed      	adds	r5, r5, r3
 8005008:	2700      	movs	r7, #0
 800500a:	42bd      	cmp	r5, r7
 800500c:	d120      	bne.n	8005050 <_printf_common+0xc8>
 800500e:	2000      	movs	r0, #0
 8005010:	e010      	b.n	8005034 <_printf_common+0xac>
 8005012:	3701      	adds	r7, #1
 8005014:	68e3      	ldr	r3, [r4, #12]
 8005016:	682a      	ldr	r2, [r5, #0]
 8005018:	1a9b      	subs	r3, r3, r2
 800501a:	42bb      	cmp	r3, r7
 800501c:	ddd2      	ble.n	8004fc4 <_printf_common+0x3c>
 800501e:	0022      	movs	r2, r4
 8005020:	2301      	movs	r3, #1
 8005022:	9901      	ldr	r1, [sp, #4]
 8005024:	9800      	ldr	r0, [sp, #0]
 8005026:	9e08      	ldr	r6, [sp, #32]
 8005028:	3219      	adds	r2, #25
 800502a:	47b0      	blx	r6
 800502c:	1c43      	adds	r3, r0, #1
 800502e:	d1f0      	bne.n	8005012 <_printf_common+0x8a>
 8005030:	2001      	movs	r0, #1
 8005032:	4240      	negs	r0, r0
 8005034:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005036:	2030      	movs	r0, #48	; 0x30
 8005038:	18e1      	adds	r1, r4, r3
 800503a:	3143      	adds	r1, #67	; 0x43
 800503c:	7008      	strb	r0, [r1, #0]
 800503e:	0021      	movs	r1, r4
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	3145      	adds	r1, #69	; 0x45
 8005044:	7809      	ldrb	r1, [r1, #0]
 8005046:	18a2      	adds	r2, r4, r2
 8005048:	3243      	adds	r2, #67	; 0x43
 800504a:	3302      	adds	r3, #2
 800504c:	7011      	strb	r1, [r2, #0]
 800504e:	e7c1      	b.n	8004fd4 <_printf_common+0x4c>
 8005050:	0022      	movs	r2, r4
 8005052:	2301      	movs	r3, #1
 8005054:	9901      	ldr	r1, [sp, #4]
 8005056:	9800      	ldr	r0, [sp, #0]
 8005058:	9e08      	ldr	r6, [sp, #32]
 800505a:	321a      	adds	r2, #26
 800505c:	47b0      	blx	r6
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d0e6      	beq.n	8005030 <_printf_common+0xa8>
 8005062:	3701      	adds	r7, #1
 8005064:	e7d1      	b.n	800500a <_printf_common+0x82>
	...

08005068 <_printf_i>:
 8005068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800506a:	b08b      	sub	sp, #44	; 0x2c
 800506c:	9206      	str	r2, [sp, #24]
 800506e:	000a      	movs	r2, r1
 8005070:	3243      	adds	r2, #67	; 0x43
 8005072:	9307      	str	r3, [sp, #28]
 8005074:	9005      	str	r0, [sp, #20]
 8005076:	9204      	str	r2, [sp, #16]
 8005078:	7e0a      	ldrb	r2, [r1, #24]
 800507a:	000c      	movs	r4, r1
 800507c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800507e:	2a78      	cmp	r2, #120	; 0x78
 8005080:	d806      	bhi.n	8005090 <_printf_i+0x28>
 8005082:	2a62      	cmp	r2, #98	; 0x62
 8005084:	d808      	bhi.n	8005098 <_printf_i+0x30>
 8005086:	2a00      	cmp	r2, #0
 8005088:	d100      	bne.n	800508c <_printf_i+0x24>
 800508a:	e0c0      	b.n	800520e <_printf_i+0x1a6>
 800508c:	2a58      	cmp	r2, #88	; 0x58
 800508e:	d052      	beq.n	8005136 <_printf_i+0xce>
 8005090:	0026      	movs	r6, r4
 8005092:	3642      	adds	r6, #66	; 0x42
 8005094:	7032      	strb	r2, [r6, #0]
 8005096:	e022      	b.n	80050de <_printf_i+0x76>
 8005098:	0010      	movs	r0, r2
 800509a:	3863      	subs	r0, #99	; 0x63
 800509c:	2815      	cmp	r0, #21
 800509e:	d8f7      	bhi.n	8005090 <_printf_i+0x28>
 80050a0:	f7fb f82e 	bl	8000100 <__gnu_thumb1_case_shi>
 80050a4:	001f0016 	.word	0x001f0016
 80050a8:	fff6fff6 	.word	0xfff6fff6
 80050ac:	fff6fff6 	.word	0xfff6fff6
 80050b0:	fff6001f 	.word	0xfff6001f
 80050b4:	fff6fff6 	.word	0xfff6fff6
 80050b8:	00a8fff6 	.word	0x00a8fff6
 80050bc:	009a0036 	.word	0x009a0036
 80050c0:	fff6fff6 	.word	0xfff6fff6
 80050c4:	fff600b9 	.word	0xfff600b9
 80050c8:	fff60036 	.word	0xfff60036
 80050cc:	009efff6 	.word	0x009efff6
 80050d0:	0026      	movs	r6, r4
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	3642      	adds	r6, #66	; 0x42
 80050d6:	1d11      	adds	r1, r2, #4
 80050d8:	6019      	str	r1, [r3, #0]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	7033      	strb	r3, [r6, #0]
 80050de:	2301      	movs	r3, #1
 80050e0:	e0a7      	b.n	8005232 <_printf_i+0x1ca>
 80050e2:	6808      	ldr	r0, [r1, #0]
 80050e4:	6819      	ldr	r1, [r3, #0]
 80050e6:	1d0a      	adds	r2, r1, #4
 80050e8:	0605      	lsls	r5, r0, #24
 80050ea:	d50b      	bpl.n	8005104 <_printf_i+0x9c>
 80050ec:	680d      	ldr	r5, [r1, #0]
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	2d00      	cmp	r5, #0
 80050f2:	da03      	bge.n	80050fc <_printf_i+0x94>
 80050f4:	232d      	movs	r3, #45	; 0x2d
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	426d      	negs	r5, r5
 80050fa:	7013      	strb	r3, [r2, #0]
 80050fc:	4b61      	ldr	r3, [pc, #388]	; (8005284 <_printf_i+0x21c>)
 80050fe:	270a      	movs	r7, #10
 8005100:	9303      	str	r3, [sp, #12]
 8005102:	e032      	b.n	800516a <_printf_i+0x102>
 8005104:	680d      	ldr	r5, [r1, #0]
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	0641      	lsls	r1, r0, #25
 800510a:	d5f1      	bpl.n	80050f0 <_printf_i+0x88>
 800510c:	b22d      	sxth	r5, r5
 800510e:	e7ef      	b.n	80050f0 <_printf_i+0x88>
 8005110:	680d      	ldr	r5, [r1, #0]
 8005112:	6819      	ldr	r1, [r3, #0]
 8005114:	1d08      	adds	r0, r1, #4
 8005116:	6018      	str	r0, [r3, #0]
 8005118:	062e      	lsls	r6, r5, #24
 800511a:	d501      	bpl.n	8005120 <_printf_i+0xb8>
 800511c:	680d      	ldr	r5, [r1, #0]
 800511e:	e003      	b.n	8005128 <_printf_i+0xc0>
 8005120:	066d      	lsls	r5, r5, #25
 8005122:	d5fb      	bpl.n	800511c <_printf_i+0xb4>
 8005124:	680d      	ldr	r5, [r1, #0]
 8005126:	b2ad      	uxth	r5, r5
 8005128:	4b56      	ldr	r3, [pc, #344]	; (8005284 <_printf_i+0x21c>)
 800512a:	270a      	movs	r7, #10
 800512c:	9303      	str	r3, [sp, #12]
 800512e:	2a6f      	cmp	r2, #111	; 0x6f
 8005130:	d117      	bne.n	8005162 <_printf_i+0xfa>
 8005132:	2708      	movs	r7, #8
 8005134:	e015      	b.n	8005162 <_printf_i+0xfa>
 8005136:	3145      	adds	r1, #69	; 0x45
 8005138:	700a      	strb	r2, [r1, #0]
 800513a:	4a52      	ldr	r2, [pc, #328]	; (8005284 <_printf_i+0x21c>)
 800513c:	9203      	str	r2, [sp, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	6821      	ldr	r1, [r4, #0]
 8005142:	ca20      	ldmia	r2!, {r5}
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	0608      	lsls	r0, r1, #24
 8005148:	d550      	bpl.n	80051ec <_printf_i+0x184>
 800514a:	07cb      	lsls	r3, r1, #31
 800514c:	d502      	bpl.n	8005154 <_printf_i+0xec>
 800514e:	2320      	movs	r3, #32
 8005150:	4319      	orrs	r1, r3
 8005152:	6021      	str	r1, [r4, #0]
 8005154:	2710      	movs	r7, #16
 8005156:	2d00      	cmp	r5, #0
 8005158:	d103      	bne.n	8005162 <_printf_i+0xfa>
 800515a:	2320      	movs	r3, #32
 800515c:	6822      	ldr	r2, [r4, #0]
 800515e:	439a      	bics	r2, r3
 8005160:	6022      	str	r2, [r4, #0]
 8005162:	0023      	movs	r3, r4
 8005164:	2200      	movs	r2, #0
 8005166:	3343      	adds	r3, #67	; 0x43
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	6863      	ldr	r3, [r4, #4]
 800516c:	60a3      	str	r3, [r4, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	db03      	blt.n	800517a <_printf_i+0x112>
 8005172:	2204      	movs	r2, #4
 8005174:	6821      	ldr	r1, [r4, #0]
 8005176:	4391      	bics	r1, r2
 8005178:	6021      	str	r1, [r4, #0]
 800517a:	2d00      	cmp	r5, #0
 800517c:	d102      	bne.n	8005184 <_printf_i+0x11c>
 800517e:	9e04      	ldr	r6, [sp, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00c      	beq.n	800519e <_printf_i+0x136>
 8005184:	9e04      	ldr	r6, [sp, #16]
 8005186:	0028      	movs	r0, r5
 8005188:	0039      	movs	r1, r7
 800518a:	f7fb f849 	bl	8000220 <__aeabi_uidivmod>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	3e01      	subs	r6, #1
 8005192:	5c5b      	ldrb	r3, [r3, r1]
 8005194:	7033      	strb	r3, [r6, #0]
 8005196:	002b      	movs	r3, r5
 8005198:	0005      	movs	r5, r0
 800519a:	429f      	cmp	r7, r3
 800519c:	d9f3      	bls.n	8005186 <_printf_i+0x11e>
 800519e:	2f08      	cmp	r7, #8
 80051a0:	d109      	bne.n	80051b6 <_printf_i+0x14e>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d506      	bpl.n	80051b6 <_printf_i+0x14e>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	6922      	ldr	r2, [r4, #16]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	dc02      	bgt.n	80051b6 <_printf_i+0x14e>
 80051b0:	2330      	movs	r3, #48	; 0x30
 80051b2:	3e01      	subs	r6, #1
 80051b4:	7033      	strb	r3, [r6, #0]
 80051b6:	9b04      	ldr	r3, [sp, #16]
 80051b8:	1b9b      	subs	r3, r3, r6
 80051ba:	6123      	str	r3, [r4, #16]
 80051bc:	9b07      	ldr	r3, [sp, #28]
 80051be:	0021      	movs	r1, r4
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	9805      	ldr	r0, [sp, #20]
 80051c4:	9b06      	ldr	r3, [sp, #24]
 80051c6:	aa09      	add	r2, sp, #36	; 0x24
 80051c8:	f7ff fede 	bl	8004f88 <_printf_common>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d135      	bne.n	800523c <_printf_i+0x1d4>
 80051d0:	2001      	movs	r0, #1
 80051d2:	4240      	negs	r0, r0
 80051d4:	b00b      	add	sp, #44	; 0x2c
 80051d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d8:	2220      	movs	r2, #32
 80051da:	6809      	ldr	r1, [r1, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	6022      	str	r2, [r4, #0]
 80051e0:	0022      	movs	r2, r4
 80051e2:	2178      	movs	r1, #120	; 0x78
 80051e4:	3245      	adds	r2, #69	; 0x45
 80051e6:	7011      	strb	r1, [r2, #0]
 80051e8:	4a27      	ldr	r2, [pc, #156]	; (8005288 <_printf_i+0x220>)
 80051ea:	e7a7      	b.n	800513c <_printf_i+0xd4>
 80051ec:	0648      	lsls	r0, r1, #25
 80051ee:	d5ac      	bpl.n	800514a <_printf_i+0xe2>
 80051f0:	b2ad      	uxth	r5, r5
 80051f2:	e7aa      	b.n	800514a <_printf_i+0xe2>
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	680d      	ldr	r5, [r1, #0]
 80051f8:	1d10      	adds	r0, r2, #4
 80051fa:	6949      	ldr	r1, [r1, #20]
 80051fc:	6018      	str	r0, [r3, #0]
 80051fe:	6813      	ldr	r3, [r2, #0]
 8005200:	062e      	lsls	r6, r5, #24
 8005202:	d501      	bpl.n	8005208 <_printf_i+0x1a0>
 8005204:	6019      	str	r1, [r3, #0]
 8005206:	e002      	b.n	800520e <_printf_i+0x1a6>
 8005208:	066d      	lsls	r5, r5, #25
 800520a:	d5fb      	bpl.n	8005204 <_printf_i+0x19c>
 800520c:	8019      	strh	r1, [r3, #0]
 800520e:	2300      	movs	r3, #0
 8005210:	9e04      	ldr	r6, [sp, #16]
 8005212:	6123      	str	r3, [r4, #16]
 8005214:	e7d2      	b.n	80051bc <_printf_i+0x154>
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	1d11      	adds	r1, r2, #4
 800521a:	6019      	str	r1, [r3, #0]
 800521c:	6816      	ldr	r6, [r2, #0]
 800521e:	2100      	movs	r1, #0
 8005220:	0030      	movs	r0, r6
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	f000 fad0 	bl	80057c8 <memchr>
 8005228:	2800      	cmp	r0, #0
 800522a:	d001      	beq.n	8005230 <_printf_i+0x1c8>
 800522c:	1b80      	subs	r0, r0, r6
 800522e:	6060      	str	r0, [r4, #4]
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	2300      	movs	r3, #0
 8005236:	9a04      	ldr	r2, [sp, #16]
 8005238:	7013      	strb	r3, [r2, #0]
 800523a:	e7bf      	b.n	80051bc <_printf_i+0x154>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	0032      	movs	r2, r6
 8005240:	9906      	ldr	r1, [sp, #24]
 8005242:	9805      	ldr	r0, [sp, #20]
 8005244:	9d07      	ldr	r5, [sp, #28]
 8005246:	47a8      	blx	r5
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d0c1      	beq.n	80051d0 <_printf_i+0x168>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	079b      	lsls	r3, r3, #30
 8005250:	d415      	bmi.n	800527e <_printf_i+0x216>
 8005252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005254:	68e0      	ldr	r0, [r4, #12]
 8005256:	4298      	cmp	r0, r3
 8005258:	dabc      	bge.n	80051d4 <_printf_i+0x16c>
 800525a:	0018      	movs	r0, r3
 800525c:	e7ba      	b.n	80051d4 <_printf_i+0x16c>
 800525e:	0022      	movs	r2, r4
 8005260:	2301      	movs	r3, #1
 8005262:	9906      	ldr	r1, [sp, #24]
 8005264:	9805      	ldr	r0, [sp, #20]
 8005266:	9e07      	ldr	r6, [sp, #28]
 8005268:	3219      	adds	r2, #25
 800526a:	47b0      	blx	r6
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d0af      	beq.n	80051d0 <_printf_i+0x168>
 8005270:	3501      	adds	r5, #1
 8005272:	68e3      	ldr	r3, [r4, #12]
 8005274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	42ab      	cmp	r3, r5
 800527a:	dcf0      	bgt.n	800525e <_printf_i+0x1f6>
 800527c:	e7e9      	b.n	8005252 <_printf_i+0x1ea>
 800527e:	2500      	movs	r5, #0
 8005280:	e7f7      	b.n	8005272 <_printf_i+0x20a>
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	08005ab9 	.word	0x08005ab9
 8005288:	08005aca 	.word	0x08005aca

0800528c <_sbrk_r>:
 800528c:	2300      	movs	r3, #0
 800528e:	b570      	push	{r4, r5, r6, lr}
 8005290:	4d06      	ldr	r5, [pc, #24]	; (80052ac <_sbrk_r+0x20>)
 8005292:	0004      	movs	r4, r0
 8005294:	0008      	movs	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fb fd80 	bl	8000d9c <_sbrk>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d103      	bne.n	80052a8 <_sbrk_r+0x1c>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d000      	beq.n	80052a8 <_sbrk_r+0x1c>
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	bd70      	pop	{r4, r5, r6, pc}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	200001d4 	.word	0x200001d4

080052b0 <__sread>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	000c      	movs	r4, r1
 80052b4:	250e      	movs	r5, #14
 80052b6:	5f49      	ldrsh	r1, [r1, r5]
 80052b8:	f000 faec 	bl	8005894 <_read_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	db03      	blt.n	80052c8 <__sread+0x18>
 80052c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052c2:	181b      	adds	r3, r3, r0
 80052c4:	6563      	str	r3, [r4, #84]	; 0x54
 80052c6:	bd70      	pop	{r4, r5, r6, pc}
 80052c8:	89a3      	ldrh	r3, [r4, #12]
 80052ca:	4a02      	ldr	r2, [pc, #8]	; (80052d4 <__sread+0x24>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	81a3      	strh	r3, [r4, #12]
 80052d0:	e7f9      	b.n	80052c6 <__sread+0x16>
 80052d2:	46c0      	nop			; (mov r8, r8)
 80052d4:	ffffefff 	.word	0xffffefff

080052d8 <__swrite>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	001f      	movs	r7, r3
 80052dc:	898b      	ldrh	r3, [r1, #12]
 80052de:	0005      	movs	r5, r0
 80052e0:	000c      	movs	r4, r1
 80052e2:	0016      	movs	r6, r2
 80052e4:	05db      	lsls	r3, r3, #23
 80052e6:	d505      	bpl.n	80052f4 <__swrite+0x1c>
 80052e8:	230e      	movs	r3, #14
 80052ea:	5ec9      	ldrsh	r1, [r1, r3]
 80052ec:	2200      	movs	r2, #0
 80052ee:	2302      	movs	r3, #2
 80052f0:	f000 f9ea 	bl	80056c8 <_lseek_r>
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	4a05      	ldr	r2, [pc, #20]	; (800530c <__swrite+0x34>)
 80052f8:	0028      	movs	r0, r5
 80052fa:	4013      	ands	r3, r2
 80052fc:	81a3      	strh	r3, [r4, #12]
 80052fe:	0032      	movs	r2, r6
 8005300:	230e      	movs	r3, #14
 8005302:	5ee1      	ldrsh	r1, [r4, r3]
 8005304:	003b      	movs	r3, r7
 8005306:	f000 f875 	bl	80053f4 <_write_r>
 800530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530c:	ffffefff 	.word	0xffffefff

08005310 <__sseek>:
 8005310:	b570      	push	{r4, r5, r6, lr}
 8005312:	000c      	movs	r4, r1
 8005314:	250e      	movs	r5, #14
 8005316:	5f49      	ldrsh	r1, [r1, r5]
 8005318:	f000 f9d6 	bl	80056c8 <_lseek_r>
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	1c42      	adds	r2, r0, #1
 8005320:	d103      	bne.n	800532a <__sseek+0x1a>
 8005322:	4a05      	ldr	r2, [pc, #20]	; (8005338 <__sseek+0x28>)
 8005324:	4013      	ands	r3, r2
 8005326:	81a3      	strh	r3, [r4, #12]
 8005328:	bd70      	pop	{r4, r5, r6, pc}
 800532a:	2280      	movs	r2, #128	; 0x80
 800532c:	0152      	lsls	r2, r2, #5
 800532e:	4313      	orrs	r3, r2
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	6560      	str	r0, [r4, #84]	; 0x54
 8005334:	e7f8      	b.n	8005328 <__sseek+0x18>
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	ffffefff 	.word	0xffffefff

0800533c <__sclose>:
 800533c:	b510      	push	{r4, lr}
 800533e:	230e      	movs	r3, #14
 8005340:	5ec9      	ldrsh	r1, [r1, r3]
 8005342:	f000 f8e3 	bl	800550c <_close_r>
 8005346:	bd10      	pop	{r4, pc}

08005348 <__swbuf_r>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	0005      	movs	r5, r0
 800534c:	000e      	movs	r6, r1
 800534e:	0014      	movs	r4, r2
 8005350:	2800      	cmp	r0, #0
 8005352:	d004      	beq.n	800535e <__swbuf_r+0x16>
 8005354:	6983      	ldr	r3, [r0, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <__swbuf_r+0x16>
 800535a:	f7ff fbb1 	bl	8004ac0 <__sinit>
 800535e:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <__swbuf_r+0xa0>)
 8005360:	429c      	cmp	r4, r3
 8005362:	d12e      	bne.n	80053c2 <__swbuf_r+0x7a>
 8005364:	686c      	ldr	r4, [r5, #4]
 8005366:	69a3      	ldr	r3, [r4, #24]
 8005368:	60a3      	str	r3, [r4, #8]
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	071b      	lsls	r3, r3, #28
 800536e:	d532      	bpl.n	80053d6 <__swbuf_r+0x8e>
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d02f      	beq.n	80053d6 <__swbuf_r+0x8e>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	6922      	ldr	r2, [r4, #16]
 800537a:	b2f7      	uxtb	r7, r6
 800537c:	1a98      	subs	r0, r3, r2
 800537e:	6963      	ldr	r3, [r4, #20]
 8005380:	b2f6      	uxtb	r6, r6
 8005382:	4283      	cmp	r3, r0
 8005384:	dc05      	bgt.n	8005392 <__swbuf_r+0x4a>
 8005386:	0021      	movs	r1, r4
 8005388:	0028      	movs	r0, r5
 800538a:	f000 f95d 	bl	8005648 <_fflush_r>
 800538e:	2800      	cmp	r0, #0
 8005390:	d127      	bne.n	80053e2 <__swbuf_r+0x9a>
 8005392:	68a3      	ldr	r3, [r4, #8]
 8005394:	3001      	adds	r0, #1
 8005396:	3b01      	subs	r3, #1
 8005398:	60a3      	str	r3, [r4, #8]
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	1c5a      	adds	r2, r3, #1
 800539e:	6022      	str	r2, [r4, #0]
 80053a0:	701f      	strb	r7, [r3, #0]
 80053a2:	6963      	ldr	r3, [r4, #20]
 80053a4:	4283      	cmp	r3, r0
 80053a6:	d004      	beq.n	80053b2 <__swbuf_r+0x6a>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	07db      	lsls	r3, r3, #31
 80053ac:	d507      	bpl.n	80053be <__swbuf_r+0x76>
 80053ae:	2e0a      	cmp	r6, #10
 80053b0:	d105      	bne.n	80053be <__swbuf_r+0x76>
 80053b2:	0021      	movs	r1, r4
 80053b4:	0028      	movs	r0, r5
 80053b6:	f000 f947 	bl	8005648 <_fflush_r>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d111      	bne.n	80053e2 <__swbuf_r+0x9a>
 80053be:	0030      	movs	r0, r6
 80053c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053c2:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <__swbuf_r+0xa4>)
 80053c4:	429c      	cmp	r4, r3
 80053c6:	d101      	bne.n	80053cc <__swbuf_r+0x84>
 80053c8:	68ac      	ldr	r4, [r5, #8]
 80053ca:	e7cc      	b.n	8005366 <__swbuf_r+0x1e>
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <__swbuf_r+0xa8>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d1c9      	bne.n	8005366 <__swbuf_r+0x1e>
 80053d2:	68ec      	ldr	r4, [r5, #12]
 80053d4:	e7c7      	b.n	8005366 <__swbuf_r+0x1e>
 80053d6:	0021      	movs	r1, r4
 80053d8:	0028      	movs	r0, r5
 80053da:	f000 f81f 	bl	800541c <__swsetup_r>
 80053de:	2800      	cmp	r0, #0
 80053e0:	d0c9      	beq.n	8005376 <__swbuf_r+0x2e>
 80053e2:	2601      	movs	r6, #1
 80053e4:	4276      	negs	r6, r6
 80053e6:	e7ea      	b.n	80053be <__swbuf_r+0x76>
 80053e8:	08005a68 	.word	0x08005a68
 80053ec:	08005a88 	.word	0x08005a88
 80053f0:	08005a48 	.word	0x08005a48

080053f4 <_write_r>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	0004      	movs	r4, r0
 80053f8:	0008      	movs	r0, r1
 80053fa:	0011      	movs	r1, r2
 80053fc:	001a      	movs	r2, r3
 80053fe:	2300      	movs	r3, #0
 8005400:	4d05      	ldr	r5, [pc, #20]	; (8005418 <_write_r+0x24>)
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	f7fb fc82 	bl	8000d0c <_write>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d103      	bne.n	8005414 <_write_r+0x20>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d000      	beq.n	8005414 <_write_r+0x20>
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	bd70      	pop	{r4, r5, r6, pc}
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	200001d4 	.word	0x200001d4

0800541c <__swsetup_r>:
 800541c:	4b37      	ldr	r3, [pc, #220]	; (80054fc <__swsetup_r+0xe0>)
 800541e:	b570      	push	{r4, r5, r6, lr}
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	0006      	movs	r6, r0
 8005424:	000c      	movs	r4, r1
 8005426:	2d00      	cmp	r5, #0
 8005428:	d005      	beq.n	8005436 <__swsetup_r+0x1a>
 800542a:	69ab      	ldr	r3, [r5, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <__swsetup_r+0x1a>
 8005430:	0028      	movs	r0, r5
 8005432:	f7ff fb45 	bl	8004ac0 <__sinit>
 8005436:	4b32      	ldr	r3, [pc, #200]	; (8005500 <__swsetup_r+0xe4>)
 8005438:	429c      	cmp	r4, r3
 800543a:	d10f      	bne.n	800545c <__swsetup_r+0x40>
 800543c:	686c      	ldr	r4, [r5, #4]
 800543e:	230c      	movs	r3, #12
 8005440:	5ee2      	ldrsh	r2, [r4, r3]
 8005442:	b293      	uxth	r3, r2
 8005444:	0711      	lsls	r1, r2, #28
 8005446:	d42d      	bmi.n	80054a4 <__swsetup_r+0x88>
 8005448:	06d9      	lsls	r1, r3, #27
 800544a:	d411      	bmi.n	8005470 <__swsetup_r+0x54>
 800544c:	2309      	movs	r3, #9
 800544e:	2001      	movs	r0, #1
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	3337      	adds	r3, #55	; 0x37
 8005454:	4313      	orrs	r3, r2
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	4240      	negs	r0, r0
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	4b29      	ldr	r3, [pc, #164]	; (8005504 <__swsetup_r+0xe8>)
 800545e:	429c      	cmp	r4, r3
 8005460:	d101      	bne.n	8005466 <__swsetup_r+0x4a>
 8005462:	68ac      	ldr	r4, [r5, #8]
 8005464:	e7eb      	b.n	800543e <__swsetup_r+0x22>
 8005466:	4b28      	ldr	r3, [pc, #160]	; (8005508 <__swsetup_r+0xec>)
 8005468:	429c      	cmp	r4, r3
 800546a:	d1e8      	bne.n	800543e <__swsetup_r+0x22>
 800546c:	68ec      	ldr	r4, [r5, #12]
 800546e:	e7e6      	b.n	800543e <__swsetup_r+0x22>
 8005470:	075b      	lsls	r3, r3, #29
 8005472:	d513      	bpl.n	800549c <__swsetup_r+0x80>
 8005474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005476:	2900      	cmp	r1, #0
 8005478:	d008      	beq.n	800548c <__swsetup_r+0x70>
 800547a:	0023      	movs	r3, r4
 800547c:	3344      	adds	r3, #68	; 0x44
 800547e:	4299      	cmp	r1, r3
 8005480:	d002      	beq.n	8005488 <__swsetup_r+0x6c>
 8005482:	0030      	movs	r0, r6
 8005484:	f000 f9bc 	bl	8005800 <_free_r>
 8005488:	2300      	movs	r3, #0
 800548a:	6363      	str	r3, [r4, #52]	; 0x34
 800548c:	2224      	movs	r2, #36	; 0x24
 800548e:	89a3      	ldrh	r3, [r4, #12]
 8005490:	4393      	bics	r3, r2
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	2300      	movs	r3, #0
 8005496:	6063      	str	r3, [r4, #4]
 8005498:	6923      	ldr	r3, [r4, #16]
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	2308      	movs	r3, #8
 800549e:	89a2      	ldrh	r2, [r4, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	81a3      	strh	r3, [r4, #12]
 80054a4:	6923      	ldr	r3, [r4, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <__swsetup_r+0xa6>
 80054aa:	21a0      	movs	r1, #160	; 0xa0
 80054ac:	2280      	movs	r2, #128	; 0x80
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	0089      	lsls	r1, r1, #2
 80054b2:	0092      	lsls	r2, r2, #2
 80054b4:	400b      	ands	r3, r1
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d003      	beq.n	80054c2 <__swsetup_r+0xa6>
 80054ba:	0021      	movs	r1, r4
 80054bc:	0030      	movs	r0, r6
 80054be:	f000 f93f 	bl	8005740 <__smakebuf_r>
 80054c2:	220c      	movs	r2, #12
 80054c4:	5ea3      	ldrsh	r3, [r4, r2]
 80054c6:	2001      	movs	r0, #1
 80054c8:	001a      	movs	r2, r3
 80054ca:	b299      	uxth	r1, r3
 80054cc:	4002      	ands	r2, r0
 80054ce:	4203      	tst	r3, r0
 80054d0:	d00f      	beq.n	80054f2 <__swsetup_r+0xd6>
 80054d2:	2200      	movs	r2, #0
 80054d4:	60a2      	str	r2, [r4, #8]
 80054d6:	6962      	ldr	r2, [r4, #20]
 80054d8:	4252      	negs	r2, r2
 80054da:	61a2      	str	r2, [r4, #24]
 80054dc:	2000      	movs	r0, #0
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	4282      	cmp	r2, r0
 80054e2:	d1ba      	bne.n	800545a <__swsetup_r+0x3e>
 80054e4:	060a      	lsls	r2, r1, #24
 80054e6:	d5b8      	bpl.n	800545a <__swsetup_r+0x3e>
 80054e8:	2240      	movs	r2, #64	; 0x40
 80054ea:	4313      	orrs	r3, r2
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	3801      	subs	r0, #1
 80054f0:	e7b3      	b.n	800545a <__swsetup_r+0x3e>
 80054f2:	0788      	lsls	r0, r1, #30
 80054f4:	d400      	bmi.n	80054f8 <__swsetup_r+0xdc>
 80054f6:	6962      	ldr	r2, [r4, #20]
 80054f8:	60a2      	str	r2, [r4, #8]
 80054fa:	e7ef      	b.n	80054dc <__swsetup_r+0xc0>
 80054fc:	2000000c 	.word	0x2000000c
 8005500:	08005a68 	.word	0x08005a68
 8005504:	08005a88 	.word	0x08005a88
 8005508:	08005a48 	.word	0x08005a48

0800550c <_close_r>:
 800550c:	2300      	movs	r3, #0
 800550e:	b570      	push	{r4, r5, r6, lr}
 8005510:	4d06      	ldr	r5, [pc, #24]	; (800552c <_close_r+0x20>)
 8005512:	0004      	movs	r4, r0
 8005514:	0008      	movs	r0, r1
 8005516:	602b      	str	r3, [r5, #0]
 8005518:	f7fb fc14 	bl	8000d44 <_close>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d103      	bne.n	8005528 <_close_r+0x1c>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d000      	beq.n	8005528 <_close_r+0x1c>
 8005526:	6023      	str	r3, [r4, #0]
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	200001d4 	.word	0x200001d4

08005530 <__sflush_r>:
 8005530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005532:	898b      	ldrh	r3, [r1, #12]
 8005534:	0005      	movs	r5, r0
 8005536:	000c      	movs	r4, r1
 8005538:	071a      	lsls	r2, r3, #28
 800553a:	d45f      	bmi.n	80055fc <__sflush_r+0xcc>
 800553c:	684a      	ldr	r2, [r1, #4]
 800553e:	2a00      	cmp	r2, #0
 8005540:	dc04      	bgt.n	800554c <__sflush_r+0x1c>
 8005542:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005544:	2a00      	cmp	r2, #0
 8005546:	dc01      	bgt.n	800554c <__sflush_r+0x1c>
 8005548:	2000      	movs	r0, #0
 800554a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800554c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800554e:	2f00      	cmp	r7, #0
 8005550:	d0fa      	beq.n	8005548 <__sflush_r+0x18>
 8005552:	2200      	movs	r2, #0
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	682e      	ldr	r6, [r5, #0]
 8005558:	602a      	str	r2, [r5, #0]
 800555a:	001a      	movs	r2, r3
 800555c:	0149      	lsls	r1, r1, #5
 800555e:	400a      	ands	r2, r1
 8005560:	420b      	tst	r3, r1
 8005562:	d034      	beq.n	80055ce <__sflush_r+0x9e>
 8005564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	075b      	lsls	r3, r3, #29
 800556a:	d506      	bpl.n	800557a <__sflush_r+0x4a>
 800556c:	6863      	ldr	r3, [r4, #4]
 800556e:	1ac0      	subs	r0, r0, r3
 8005570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <__sflush_r+0x4a>
 8005576:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005578:	1ac0      	subs	r0, r0, r3
 800557a:	0002      	movs	r2, r0
 800557c:	6a21      	ldr	r1, [r4, #32]
 800557e:	2300      	movs	r3, #0
 8005580:	0028      	movs	r0, r5
 8005582:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005584:	47b8      	blx	r7
 8005586:	89a1      	ldrh	r1, [r4, #12]
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d106      	bne.n	800559a <__sflush_r+0x6a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	2b1d      	cmp	r3, #29
 8005590:	d831      	bhi.n	80055f6 <__sflush_r+0xc6>
 8005592:	4a2c      	ldr	r2, [pc, #176]	; (8005644 <__sflush_r+0x114>)
 8005594:	40da      	lsrs	r2, r3
 8005596:	07d3      	lsls	r3, r2, #31
 8005598:	d52d      	bpl.n	80055f6 <__sflush_r+0xc6>
 800559a:	2300      	movs	r3, #0
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	04cb      	lsls	r3, r1, #19
 80055a4:	d505      	bpl.n	80055b2 <__sflush_r+0x82>
 80055a6:	1c43      	adds	r3, r0, #1
 80055a8:	d102      	bne.n	80055b0 <__sflush_r+0x80>
 80055aa:	682b      	ldr	r3, [r5, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d100      	bne.n	80055b2 <__sflush_r+0x82>
 80055b0:	6560      	str	r0, [r4, #84]	; 0x54
 80055b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b4:	602e      	str	r6, [r5, #0]
 80055b6:	2900      	cmp	r1, #0
 80055b8:	d0c6      	beq.n	8005548 <__sflush_r+0x18>
 80055ba:	0023      	movs	r3, r4
 80055bc:	3344      	adds	r3, #68	; 0x44
 80055be:	4299      	cmp	r1, r3
 80055c0:	d002      	beq.n	80055c8 <__sflush_r+0x98>
 80055c2:	0028      	movs	r0, r5
 80055c4:	f000 f91c 	bl	8005800 <_free_r>
 80055c8:	2000      	movs	r0, #0
 80055ca:	6360      	str	r0, [r4, #52]	; 0x34
 80055cc:	e7bd      	b.n	800554a <__sflush_r+0x1a>
 80055ce:	2301      	movs	r3, #1
 80055d0:	0028      	movs	r0, r5
 80055d2:	6a21      	ldr	r1, [r4, #32]
 80055d4:	47b8      	blx	r7
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	d1c5      	bne.n	8005566 <__sflush_r+0x36>
 80055da:	682b      	ldr	r3, [r5, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0c2      	beq.n	8005566 <__sflush_r+0x36>
 80055e0:	2b1d      	cmp	r3, #29
 80055e2:	d001      	beq.n	80055e8 <__sflush_r+0xb8>
 80055e4:	2b16      	cmp	r3, #22
 80055e6:	d101      	bne.n	80055ec <__sflush_r+0xbc>
 80055e8:	602e      	str	r6, [r5, #0]
 80055ea:	e7ad      	b.n	8005548 <__sflush_r+0x18>
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	89a2      	ldrh	r2, [r4, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	81a3      	strh	r3, [r4, #12]
 80055f4:	e7a9      	b.n	800554a <__sflush_r+0x1a>
 80055f6:	2340      	movs	r3, #64	; 0x40
 80055f8:	430b      	orrs	r3, r1
 80055fa:	e7fa      	b.n	80055f2 <__sflush_r+0xc2>
 80055fc:	690f      	ldr	r7, [r1, #16]
 80055fe:	2f00      	cmp	r7, #0
 8005600:	d0a2      	beq.n	8005548 <__sflush_r+0x18>
 8005602:	680a      	ldr	r2, [r1, #0]
 8005604:	600f      	str	r7, [r1, #0]
 8005606:	1bd2      	subs	r2, r2, r7
 8005608:	9201      	str	r2, [sp, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	d100      	bne.n	8005612 <__sflush_r+0xe2>
 8005610:	694a      	ldr	r2, [r1, #20]
 8005612:	60a2      	str	r2, [r4, #8]
 8005614:	9b01      	ldr	r3, [sp, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	dc00      	bgt.n	800561c <__sflush_r+0xec>
 800561a:	e795      	b.n	8005548 <__sflush_r+0x18>
 800561c:	003a      	movs	r2, r7
 800561e:	0028      	movs	r0, r5
 8005620:	9b01      	ldr	r3, [sp, #4]
 8005622:	6a21      	ldr	r1, [r4, #32]
 8005624:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005626:	47b0      	blx	r6
 8005628:	2800      	cmp	r0, #0
 800562a:	dc06      	bgt.n	800563a <__sflush_r+0x10a>
 800562c:	2340      	movs	r3, #64	; 0x40
 800562e:	2001      	movs	r0, #1
 8005630:	89a2      	ldrh	r2, [r4, #12]
 8005632:	4240      	negs	r0, r0
 8005634:	4313      	orrs	r3, r2
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	e787      	b.n	800554a <__sflush_r+0x1a>
 800563a:	9b01      	ldr	r3, [sp, #4]
 800563c:	183f      	adds	r7, r7, r0
 800563e:	1a1b      	subs	r3, r3, r0
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	e7e7      	b.n	8005614 <__sflush_r+0xe4>
 8005644:	20400001 	.word	0x20400001

08005648 <_fflush_r>:
 8005648:	690b      	ldr	r3, [r1, #16]
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	0005      	movs	r5, r0
 800564e:	000c      	movs	r4, r1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <_fflush_r+0x12>
 8005654:	2500      	movs	r5, #0
 8005656:	0028      	movs	r0, r5
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	2800      	cmp	r0, #0
 800565c:	d004      	beq.n	8005668 <_fflush_r+0x20>
 800565e:	6983      	ldr	r3, [r0, #24]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <_fflush_r+0x20>
 8005664:	f7ff fa2c 	bl	8004ac0 <__sinit>
 8005668:	4b14      	ldr	r3, [pc, #80]	; (80056bc <_fflush_r+0x74>)
 800566a:	429c      	cmp	r4, r3
 800566c:	d11b      	bne.n	80056a6 <_fflush_r+0x5e>
 800566e:	686c      	ldr	r4, [r5, #4]
 8005670:	220c      	movs	r2, #12
 8005672:	5ea3      	ldrsh	r3, [r4, r2]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ed      	beq.n	8005654 <_fflush_r+0xc>
 8005678:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800567a:	07d2      	lsls	r2, r2, #31
 800567c:	d404      	bmi.n	8005688 <_fflush_r+0x40>
 800567e:	059b      	lsls	r3, r3, #22
 8005680:	d402      	bmi.n	8005688 <_fflush_r+0x40>
 8005682:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005684:	f7ff fabd 	bl	8004c02 <__retarget_lock_acquire_recursive>
 8005688:	0028      	movs	r0, r5
 800568a:	0021      	movs	r1, r4
 800568c:	f7ff ff50 	bl	8005530 <__sflush_r>
 8005690:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005692:	0005      	movs	r5, r0
 8005694:	07db      	lsls	r3, r3, #31
 8005696:	d4de      	bmi.n	8005656 <_fflush_r+0xe>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	059b      	lsls	r3, r3, #22
 800569c:	d4db      	bmi.n	8005656 <_fflush_r+0xe>
 800569e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a0:	f7ff fab0 	bl	8004c04 <__retarget_lock_release_recursive>
 80056a4:	e7d7      	b.n	8005656 <_fflush_r+0xe>
 80056a6:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <_fflush_r+0x78>)
 80056a8:	429c      	cmp	r4, r3
 80056aa:	d101      	bne.n	80056b0 <_fflush_r+0x68>
 80056ac:	68ac      	ldr	r4, [r5, #8]
 80056ae:	e7df      	b.n	8005670 <_fflush_r+0x28>
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <_fflush_r+0x7c>)
 80056b2:	429c      	cmp	r4, r3
 80056b4:	d1dc      	bne.n	8005670 <_fflush_r+0x28>
 80056b6:	68ec      	ldr	r4, [r5, #12]
 80056b8:	e7da      	b.n	8005670 <_fflush_r+0x28>
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	08005a68 	.word	0x08005a68
 80056c0:	08005a88 	.word	0x08005a88
 80056c4:	08005a48 	.word	0x08005a48

080056c8 <_lseek_r>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	0004      	movs	r4, r0
 80056cc:	0008      	movs	r0, r1
 80056ce:	0011      	movs	r1, r2
 80056d0:	001a      	movs	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	4d05      	ldr	r5, [pc, #20]	; (80056ec <_lseek_r+0x24>)
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	f7fb fb55 	bl	8000d86 <_lseek>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d103      	bne.n	80056e8 <_lseek_r+0x20>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d000      	beq.n	80056e8 <_lseek_r+0x20>
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	200001d4 	.word	0x200001d4

080056f0 <__swhatbuf_r>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	000e      	movs	r6, r1
 80056f4:	001d      	movs	r5, r3
 80056f6:	230e      	movs	r3, #14
 80056f8:	5ec9      	ldrsh	r1, [r1, r3]
 80056fa:	0014      	movs	r4, r2
 80056fc:	b096      	sub	sp, #88	; 0x58
 80056fe:	2900      	cmp	r1, #0
 8005700:	da07      	bge.n	8005712 <__swhatbuf_r+0x22>
 8005702:	2300      	movs	r3, #0
 8005704:	602b      	str	r3, [r5, #0]
 8005706:	89b3      	ldrh	r3, [r6, #12]
 8005708:	061b      	lsls	r3, r3, #24
 800570a:	d411      	bmi.n	8005730 <__swhatbuf_r+0x40>
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	e00f      	b.n	8005732 <__swhatbuf_r+0x42>
 8005712:	466a      	mov	r2, sp
 8005714:	f000 f8d2 	bl	80058bc <_fstat_r>
 8005718:	2800      	cmp	r0, #0
 800571a:	dbf2      	blt.n	8005702 <__swhatbuf_r+0x12>
 800571c:	23f0      	movs	r3, #240	; 0xf0
 800571e:	9901      	ldr	r1, [sp, #4]
 8005720:	021b      	lsls	r3, r3, #8
 8005722:	4019      	ands	r1, r3
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <__swhatbuf_r+0x4c>)
 8005726:	18c9      	adds	r1, r1, r3
 8005728:	424b      	negs	r3, r1
 800572a:	4159      	adcs	r1, r3
 800572c:	6029      	str	r1, [r5, #0]
 800572e:	e7ed      	b.n	800570c <__swhatbuf_r+0x1c>
 8005730:	2340      	movs	r3, #64	; 0x40
 8005732:	2000      	movs	r0, #0
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	b016      	add	sp, #88	; 0x58
 8005738:	bd70      	pop	{r4, r5, r6, pc}
 800573a:	46c0      	nop			; (mov r8, r8)
 800573c:	ffffe000 	.word	0xffffe000

08005740 <__smakebuf_r>:
 8005740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005742:	2602      	movs	r6, #2
 8005744:	898b      	ldrh	r3, [r1, #12]
 8005746:	0005      	movs	r5, r0
 8005748:	000c      	movs	r4, r1
 800574a:	4233      	tst	r3, r6
 800574c:	d006      	beq.n	800575c <__smakebuf_r+0x1c>
 800574e:	0023      	movs	r3, r4
 8005750:	3347      	adds	r3, #71	; 0x47
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	6123      	str	r3, [r4, #16]
 8005756:	2301      	movs	r3, #1
 8005758:	6163      	str	r3, [r4, #20]
 800575a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800575c:	466a      	mov	r2, sp
 800575e:	ab01      	add	r3, sp, #4
 8005760:	f7ff ffc6 	bl	80056f0 <__swhatbuf_r>
 8005764:	9900      	ldr	r1, [sp, #0]
 8005766:	0007      	movs	r7, r0
 8005768:	0028      	movs	r0, r5
 800576a:	f7ff fa4d 	bl	8004c08 <_malloc_r>
 800576e:	2800      	cmp	r0, #0
 8005770:	d108      	bne.n	8005784 <__smakebuf_r+0x44>
 8005772:	220c      	movs	r2, #12
 8005774:	5ea3      	ldrsh	r3, [r4, r2]
 8005776:	059a      	lsls	r2, r3, #22
 8005778:	d4ef      	bmi.n	800575a <__smakebuf_r+0x1a>
 800577a:	2203      	movs	r2, #3
 800577c:	4393      	bics	r3, r2
 800577e:	431e      	orrs	r6, r3
 8005780:	81a6      	strh	r6, [r4, #12]
 8005782:	e7e4      	b.n	800574e <__smakebuf_r+0xe>
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <__smakebuf_r+0x84>)
 8005786:	62ab      	str	r3, [r5, #40]	; 0x28
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	89a2      	ldrh	r2, [r4, #12]
 800578c:	6020      	str	r0, [r4, #0]
 800578e:	4313      	orrs	r3, r2
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	9b00      	ldr	r3, [sp, #0]
 8005794:	6120      	str	r0, [r4, #16]
 8005796:	6163      	str	r3, [r4, #20]
 8005798:	9b01      	ldr	r3, [sp, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <__smakebuf_r+0x7a>
 800579e:	0028      	movs	r0, r5
 80057a0:	230e      	movs	r3, #14
 80057a2:	5ee1      	ldrsh	r1, [r4, r3]
 80057a4:	f000 f89c 	bl	80058e0 <_isatty_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d006      	beq.n	80057ba <__smakebuf_r+0x7a>
 80057ac:	2203      	movs	r2, #3
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	4393      	bics	r3, r2
 80057b2:	001a      	movs	r2, r3
 80057b4:	2301      	movs	r3, #1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	89a0      	ldrh	r0, [r4, #12]
 80057bc:	4307      	orrs	r7, r0
 80057be:	81a7      	strh	r7, [r4, #12]
 80057c0:	e7cb      	b.n	800575a <__smakebuf_r+0x1a>
 80057c2:	46c0      	nop			; (mov r8, r8)
 80057c4:	08004a45 	.word	0x08004a45

080057c8 <memchr>:
 80057c8:	b2c9      	uxtb	r1, r1
 80057ca:	1882      	adds	r2, r0, r2
 80057cc:	4290      	cmp	r0, r2
 80057ce:	d101      	bne.n	80057d4 <memchr+0xc>
 80057d0:	2000      	movs	r0, #0
 80057d2:	4770      	bx	lr
 80057d4:	7803      	ldrb	r3, [r0, #0]
 80057d6:	428b      	cmp	r3, r1
 80057d8:	d0fb      	beq.n	80057d2 <memchr+0xa>
 80057da:	3001      	adds	r0, #1
 80057dc:	e7f6      	b.n	80057cc <memchr+0x4>
	...

080057e0 <__malloc_lock>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	4802      	ldr	r0, [pc, #8]	; (80057ec <__malloc_lock+0xc>)
 80057e4:	f7ff fa0d 	bl	8004c02 <__retarget_lock_acquire_recursive>
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	200001cc 	.word	0x200001cc

080057f0 <__malloc_unlock>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4802      	ldr	r0, [pc, #8]	; (80057fc <__malloc_unlock+0xc>)
 80057f4:	f7ff fa06 	bl	8004c04 <__retarget_lock_release_recursive>
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	200001cc 	.word	0x200001cc

08005800 <_free_r>:
 8005800:	b570      	push	{r4, r5, r6, lr}
 8005802:	0005      	movs	r5, r0
 8005804:	2900      	cmp	r1, #0
 8005806:	d010      	beq.n	800582a <_free_r+0x2a>
 8005808:	1f0c      	subs	r4, r1, #4
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da00      	bge.n	8005812 <_free_r+0x12>
 8005810:	18e4      	adds	r4, r4, r3
 8005812:	0028      	movs	r0, r5
 8005814:	f7ff ffe4 	bl	80057e0 <__malloc_lock>
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <_free_r+0x90>)
 800581a:	6813      	ldr	r3, [r2, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <_free_r+0x2c>
 8005820:	6063      	str	r3, [r4, #4]
 8005822:	6014      	str	r4, [r2, #0]
 8005824:	0028      	movs	r0, r5
 8005826:	f7ff ffe3 	bl	80057f0 <__malloc_unlock>
 800582a:	bd70      	pop	{r4, r5, r6, pc}
 800582c:	42a3      	cmp	r3, r4
 800582e:	d908      	bls.n	8005842 <_free_r+0x42>
 8005830:	6821      	ldr	r1, [r4, #0]
 8005832:	1860      	adds	r0, r4, r1
 8005834:	4283      	cmp	r3, r0
 8005836:	d1f3      	bne.n	8005820 <_free_r+0x20>
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	1841      	adds	r1, r0, r1
 800583e:	6021      	str	r1, [r4, #0]
 8005840:	e7ee      	b.n	8005820 <_free_r+0x20>
 8005842:	001a      	movs	r2, r3
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <_free_r+0x4e>
 800584a:	42a3      	cmp	r3, r4
 800584c:	d9f9      	bls.n	8005842 <_free_r+0x42>
 800584e:	6811      	ldr	r1, [r2, #0]
 8005850:	1850      	adds	r0, r2, r1
 8005852:	42a0      	cmp	r0, r4
 8005854:	d10b      	bne.n	800586e <_free_r+0x6e>
 8005856:	6820      	ldr	r0, [r4, #0]
 8005858:	1809      	adds	r1, r1, r0
 800585a:	1850      	adds	r0, r2, r1
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	4283      	cmp	r3, r0
 8005860:	d1e0      	bne.n	8005824 <_free_r+0x24>
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	1841      	adds	r1, r0, r1
 8005868:	6011      	str	r1, [r2, #0]
 800586a:	6053      	str	r3, [r2, #4]
 800586c:	e7da      	b.n	8005824 <_free_r+0x24>
 800586e:	42a0      	cmp	r0, r4
 8005870:	d902      	bls.n	8005878 <_free_r+0x78>
 8005872:	230c      	movs	r3, #12
 8005874:	602b      	str	r3, [r5, #0]
 8005876:	e7d5      	b.n	8005824 <_free_r+0x24>
 8005878:	6821      	ldr	r1, [r4, #0]
 800587a:	1860      	adds	r0, r4, r1
 800587c:	4283      	cmp	r3, r0
 800587e:	d103      	bne.n	8005888 <_free_r+0x88>
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	1841      	adds	r1, r0, r1
 8005886:	6021      	str	r1, [r4, #0]
 8005888:	6063      	str	r3, [r4, #4]
 800588a:	6054      	str	r4, [r2, #4]
 800588c:	e7ca      	b.n	8005824 <_free_r+0x24>
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	20000090 	.word	0x20000090

08005894 <_read_r>:
 8005894:	b570      	push	{r4, r5, r6, lr}
 8005896:	0004      	movs	r4, r0
 8005898:	0008      	movs	r0, r1
 800589a:	0011      	movs	r1, r2
 800589c:	001a      	movs	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	4d05      	ldr	r5, [pc, #20]	; (80058b8 <_read_r+0x24>)
 80058a2:	602b      	str	r3, [r5, #0]
 80058a4:	f7fb fa15 	bl	8000cd2 <_read>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d103      	bne.n	80058b4 <_read_r+0x20>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d000      	beq.n	80058b4 <_read_r+0x20>
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	200001d4 	.word	0x200001d4

080058bc <_fstat_r>:
 80058bc:	2300      	movs	r3, #0
 80058be:	b570      	push	{r4, r5, r6, lr}
 80058c0:	4d06      	ldr	r5, [pc, #24]	; (80058dc <_fstat_r+0x20>)
 80058c2:	0004      	movs	r4, r0
 80058c4:	0008      	movs	r0, r1
 80058c6:	0011      	movs	r1, r2
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	f7fb fa45 	bl	8000d58 <_fstat>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d103      	bne.n	80058da <_fstat_r+0x1e>
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d000      	beq.n	80058da <_fstat_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	200001d4 	.word	0x200001d4

080058e0 <_isatty_r>:
 80058e0:	2300      	movs	r3, #0
 80058e2:	b570      	push	{r4, r5, r6, lr}
 80058e4:	4d06      	ldr	r5, [pc, #24]	; (8005900 <_isatty_r+0x20>)
 80058e6:	0004      	movs	r4, r0
 80058e8:	0008      	movs	r0, r1
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	f7fb fa42 	bl	8000d74 <_isatty>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d103      	bne.n	80058fc <_isatty_r+0x1c>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d000      	beq.n	80058fc <_isatty_r+0x1c>
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	46c0      	nop			; (mov r8, r8)
 8005900:	200001d4 	.word	0x200001d4

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
